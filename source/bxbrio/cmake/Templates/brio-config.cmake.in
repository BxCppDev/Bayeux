# - Config file for the brio package
# It defines the following variables
#  brio_INCLUDE_DIRS - include directories for brio
#  brio_LIBRARIES    - libraries to link against
#  brio_ONLY_LIBRARIES - package only libraries to link against
#  brio_WITH_DEBUG   - flag for debug mode
# If Boost/Serialization I/O system is supported :
#  brio_WITH_BIO     - flag for Boost/Serialization I/O DLL (a.k.a. 'bio')
# If Boost/Python wrapper module is supported :
#  brio_WITH_PYTHON_WRAPPER - flag for 'Boost/Python' module 

#----------------------------------------------------------------------------
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#----------------------------------------------------------------------------

if ( NOT DEFINED brio_CONFIG_COUNTER )
set ( brio_CONFIG_COUNTER 1 )

#----------------------------------------------------------------------------
# Locate ourselves, since all our config files should have been installed
# alongside us...
#
get_filename_component(_thisdir "${CMAKE_CURRENT_LIST_FILE}" PATH)

#----------------------------------------------------------------------------
# Include the file listing all the imported targets to make them available
# This is installed in the same location as us...
#
include("${_thisdir}/brio-libraries.cmake")

#----------------------------------------------------------------------------
# Set variables pointing to used third party headers and locations.
# We have to set the headers because brio exports the headers in
# its public interface.

#----------------------------------------------------------------------------
# Set path to brio includes
#
set(brio_ONLY_INCLUDE_DIRS @brio_INCLUDE_DIR@)

# Trick to explicitely import the datatools exports (is it the right way to cascade imports ?) :
#message ( STATUS "DEVEL: brio-config.cmake: Including datatools_CONFIG='@datatools_CONFIG@'" )
#include ( @datatools_CONFIG@ )

set ( datatools_DIR "${datatools_DIR}" )
find_package ( datatools )

set(_brio_root_INCLUDE_DIRS      @ROOT_INCLUDE_DIR@)
set(_brio_datatools_INCLUDE_DIRS @datatools_INCLUDE_DIRS@)

set (brio_INCLUDE_DIRS 
     ${brio_ONLY_INCLUDE_DIRS}
     ${_brio_datatools_INCLUDE_DIRS}
     ${_brio_root_INCLUDE_DIRS}
    )

unset(_brio_root_INCLUDE_DIRS)
unset(_brio_datatools_INCLUDE_DIRS)

#----------------------------------------------------------------------------
# Set brio_LIBRARIES variable
set(brio_LIB_DIR @brio_LIB_DIR@)
# Basic : Assume that if brio_bio was built, it should be in Library list
set(brio_LIBRARY brio )

set(brio_WITH_DEBUG @BRIO_WITH_DEBUG@)
if(brio_WITH_DEBUG)
  set(brio_WITH_DEBUG 1)
else()
  set(brio_WITH_DEBUG 0)
endif()

# if ( @BRIO_WITH_BIO_SUPPORT@ )
#  set(brio_WITH_BIO @BRIO_WITH_BIO@)
#  if(brio_WITH_BIO)
#    set(brio_WITH_BIO 1)
#    set(brio_BIO_LIBRARY brio_bio )
#  else()
#    set(brio_WITH_BIO 0)
#  endif()
# endif()

# if ( @BRIO_WITH_PYTHON_WRAPPER_SUPPORT@ )
#   set(brio_WITH_PYTHON_WRAPPER @BRIO_WITH_PYTHON_WRAPPER@)
#   if(brio_WITH_PYTHON_WRAPPER)
#     set(brio_WITH_PYTHON_WRAPPER 1)
#   else()
#     set(brio_WITH_PYTHON_WRAPPER 0)
#   endif()
# endif ()

set(brio_ONLY_LIBRARIES ${brio_LIBRARY} )

set(_brio_datatools_LIBRARIES @datatools_LIBRARIES@)
set(_brio_root_LIBRARIES      @ROOT_LIBRARIES@)
set(brio_LIBRARIES 
     ${brio_ONLY_LIBRARIES}
     ${_brio_datatools_LIBRARIES}
     ${_brio_root_LIBRARIES}
   )

unset(_brio_root_LIBRARIES)
unset(_brio_datatools_LIBRARIES)

message ( STATUS "DEVEL: brio-config.cmake: brio_VERSION=${brio_VERSION}" )
message ( STATUS "DEVEL: brio-config.cmake: brio_INCLUDE_DIRS=${brio_INCLUDE_DIRS}" )
message ( STATUS "DEVEL: brio-config.cmake: brio_ONLY_INCLUDE_DIRS=${brio_ONLY_INCLUDE_DIRS}" )
message ( STATUS "DEVEL: brio-config.cmake: brio_LIBRARIES=${brio_LIBRARIES}" )
message ( STATUS "DEVEL: brio-config.cmake: brio_ONLY_LIBRARIES=${brio_ONLY_LIBRARIES}" )

else ( NOT DEFINED brio_CONFIG_COUNTER )
  message ( WARNING "Multiple inclusion of the 'brio-config.cmake' file !" )
  math (EXPR brio_CONFIG_COUNTER '${brio_CONFIG_COUNTER}+1' )
endif ( NOT DEFINED brio_CONFIG_COUNTER )

# end

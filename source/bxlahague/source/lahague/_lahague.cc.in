// lahague/_lahague.cc
//
// Copyright (c) 2015 by Fran√ßois Mauger <mauger@lpccaen.in2p3.fr>
//                       and Arnaud Chapon <achapon@cerap.fr>
//
// This file is part of LaHague.
//
// LaHague is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LaHague is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with LaHague. If not, see <http://www.gnu.org/licenses/>.
//

// Ourselves:
#include <lahague/lahague_config.h>

// Third-party:
// - datatools:
#include <datatools/kernel.h>
#include <datatools/library_info.h>
#include <datatools/properties.h>

// This package:
#include <lahague/version.h>
#include <lahague/resource.h>

namespace lahague {

  void _special_initialize_impl()
  {
#if LAHAGUE_STANDALONE == 1
    DT_THROW_IF(!datatools::kernel::is_instantiated(),
                std::runtime_error,
                "The datatools kernel is not instantiated !");
    datatools::kernel & krnl = datatools::kernel::instance();
    // Populate the library info register:
    if (krnl.has_library_info_register()) {
      // Registration of the datatools component in the kernel's library info register:
      datatools::library_info & lib_info_reg = krnl.grab_library_info_register();
      datatools::properties & lib_infos
        = lib_info_reg.registration("lahague",
                                    "Dosimetry and radioprotection tools.",
                                    lahague::version::get_version(),
                                    "@CMAKE_INSTALL_PREFIX@", // Hardcoded for now
                                    "@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@" // Hardcoded for now
                                    );

      /* If needed, we could replace the hardcoded paths above by some
       * calls to runtime API methods (particulary for relocatable lib):
       *
       *   datatools::install::get_prefix()
       *   datatools::install::get_lib_dir()
       *   datatools::install::get_data_dir()
       *
       * as it is done with : datatools::version::get_version()
       */
      // Additionnal stored parameters :

      lib_infos.store_string(datatools::library_info::keys::install_resource_dir(),
                             lahague::get_resource_dir());

      lib_infos.store_string(datatools::library_info::keys::env_resource_dir(),
                             LAHAGUE_ENV_RESOURCE_DIR);


      lib_infos.store_integer(datatools::library_info::keys::version_major(),
                              lahague::version::get_major());

      lib_infos.store_integer(datatools::library_info::keys::version_minor(),
                              lahague::version::get_minor());

      lib_infos.store_integer(datatools::library_info::keys::version_patch(),
                              lahague::version::get_patch());


      lib_infos.store_string(datatools::library_info::keys::build_type(),
                             "@CMAKE_BUILD_TYPE@");

      if (lib_info_reg.get_logging() >= datatools::logger::PRIO_TRACE) {
        DT_LOG_TRACE(lib_info_reg.get_logging(),
                     "Status of the library info register: " );
        lib_info_reg.tree_dump(std::cerr);
      }
    }
#else // LAHAGUE_STANDALONE == 1
    // Nothing to do in bundle mode
#endif // LAHAGUE_STANDALONE == 0
    return;
  }

  void _special_terminate_impl()
  {
#if LAHAGUE_STANDALONE == 1
    if (datatools::kernel::is_instantiated()) {
      datatools::kernel & krnl = datatools::kernel::instance();
      if (krnl.has_library_info_register()) {

        // Access to the datatools kernel library info register:
        datatools::library_info & lib_info_reg = krnl.grab_library_info_register();

        // Unregistration of the lahague component in the kernel's
        // library info register:
        if (lib_info_reg.has("lahague")) {
          lib_info_reg.unregistration("lahague");
        }

        if (lib_info_reg.get_logging() >= datatools::logger::PRIO_TRACE) {
          DT_LOG_TRACE(lib_info_reg.get_logging(),
                       "Status of the library info register: " );
          lib_info_reg.tree_dump(std::cerr);
        }
      }
    }
#else // LAHAGUE_STANDALONE == 1
    // Nothing to do in bundle mode
#endif // LAHAGUE_STANDALONE == 0
    return;
  }

} // end of namespace lahague

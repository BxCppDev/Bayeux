# List of configuration properties (datatools::properties).
# Lines starting with '#@' are special directives.
# Lines starting with '#' are simple comments.

#@config The configuration parameters for the geomtools manager

# #@description The logging priority threshold
# logging.priority : string = "warning"

#@description The label that identifies the virtual geometry setup
setup_label : string = "geomtools_ex00"

#@description The version string of the virtual geometry setup
setup_version : string = "0.1"

#@description The description string of the virtual geometry setup
setup_description : string = "A dummy virtual geometry setup"

# #@description General logging priority
# logging.priority : string = "fatal"
#
# Other values are possible: "notice", "warning", "debug", "trace"...
#

# #@description The flag inhibits the preloading of plugins' factories
# plugins.factory_no_preload : boolean = 0

# #@description The flag forces the initialization of plugins at load stage.
# plugins.force_initialization_at_load : boolean = 0

# #@description Logging priority of the embedded factory of geometry models
# factory.logging.priority : string = "fatal"

# #@description A file that contains a list of geometry definition files
# factory.geom_list : string as path = \
#   "${SETUP_CONFIG_DIR}/geomtools_ex00/geometry/0.1/models/geom_models.lis"
#
# It is not used here because we explicitely define the files that describes the
# geometry models (see below)

#@description A list of files used by the shape factory
shape_factory.shapes_files : string[1] as path  = \
  "${SETUP_CONFIG_DIR}/geomtools_ex00/geometry/0.1/models/shapes.defs"
#
# These files define some labelled 3D shapes that can be referenced
# by geometry models defines through the *.geom files below.

#@description A list of files that contains the definitions of geometry models
factory.geom_files : string[5] as path  = \
  "${SETUP_CONFIG_DIR}/geomtools_ex00/geometry/0.1/models/simple_shaped_models.geom" \
  "${SETUP_CONFIG_DIR}/geomtools_ex00/geometry/0.1/models/replica_models.geom" \
  "${SETUP_CONFIG_DIR}/geomtools_ex00/geometry/0.1/models/assembly_models.geom" \
  "${SETUP_CONFIG_DIR}/geomtools_ex00/geometry/0.1/models/meshed_models.geom" \
  "${SETUP_CONFIG_DIR}/geomtools_ex00/geometry/0.1/models/world.geom"

# The above files are read in this order because top-level geometry models in the hierarchy
# (logical volumes) need to *know* the more elementary geometry models before to
# consider them as daughter volumes.

# #@description A list of prefixes for property keys that are stored in the geometry logical volumes
# factory.preserved_property_prefixes : string[3] = \
#   "radioactivity." \
#   "magnetization." \
#   "optical_properties."

# By default,  all properties  with keys  starting with  the following
# prefixes will be  preserved and stored in the  models and associated
# logical volumes:
#  * "mapping" : for geometry identifier (GID) mapping
#  * "visibility" : for rendering client application
#  * "material" : for description of materials associated to volumes

# #@description A name of the top level geometry volume (default conventional value)
# world_name : string = "world"

#@description Logging priority of the embedded ID manager
id_mgr.logging.priority : string = "debug"

#@description A list of files that contains the definitions of geometry categories
id_mgr.categories_lists : string[2] as path = \
  "${SETUP_CONFIG_DIR}/geomtools_ex00/geometry/0.1/mapping/lab_categories.lis" \
  "${SETUP_CONFIG_DIR}/geomtools_ex00/geometry/0.1/mapping/det_categories.lis"
#
# These files define all the geometry categories to be considered during
# the mapping (construction of geometry IDS).
#

# id_mgr.world_category : string  = "zozo"
# id_mgr.plain_category : string  = "truc"
# id_mgr.force_plain    : boolean = 1

#@description Build the embedded default mapping dictionnary
build_mapping : boolean = 1

#@description A list of files that contains mapping rules associated to geometry models
mapping.external_rules : string[2] as path = \
  "${SETUP_CONFIG_DIR}/geomtools_ex00/geometry/0.1/mapping/mapping_rules.def" \
  "${SETUP_CONFIG_DIR}/geomtools_ex00/geometry/0.1/mapping/mapping_rules_2.def"
#
# There is two ways to define the mapping rules that are used by the geometry manager's
# embedded mapping algorithm :
#  a) the rules can be defined within the .geom file themselves, from the
#     sections where geometry models are defined with their daughter volumes
#     (as internal physical volumes),
#  b) alternatively, the rules can be defined within special files defined
#     by the "external_mapping_rules" property.

#@description Configuration files for plugins associated to and loaded from the geometry manager
plugins.configuration_files : string[2] as path = \
  "${SETUP_CONFIG_DIR}/geomtools_ex00/geometry/0.1/plugins/materials.conf" \
  "${SETUP_CONFIG_DIR}/geomtools_ex00/geometry/0.1/plugins/mappings.conf"

# Plugin are not mandatory. However, the Bayeux library provides basic
# plugins that  are expected for  some applications. For  example, the
# definitions of logical volumes'  materials are implemented through a
# dedicated "material plugin" that uses a material manager object from
# the "Bayeux/materials"  library (class  "materials::manager"). While
# it is probably not necessary to  know the materials some volumes are
# made of  if we  just build  a 3D  display of  the geometry  setup, a
# Monte-Carlo application (i.e. Geant4) using Bayeux as the kernel for
# geometry description will request  the full description of materials
# used in  the setup.  This  is why the  user, for such  purpose, will
# provide a suitable "material plugin" to the geometry manager. He/she
# is responsible to ensure that all "material.ref" properties found in
# the model description ".geom" file  will correspond to some existing
# materials  (or  material  aliases)   defined  through  the  material
# manager.    Other   kinds   of   plugin   exist:   mapping   plugin,
# electromagnetic field plugin...


# end of file.

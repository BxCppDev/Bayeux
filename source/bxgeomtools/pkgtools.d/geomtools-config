#!/usr/bin/env bash
# -*- mode: shell-script; -*-
# geomtools-config
#
# Note:
#
# The following environment variables may be set to change 
# the behaviour of the geomtools-config script:
#
# export GEOMTOOLS_LDFLAGS_MODE="hardcoded_shared_lib_path"
#  will force the usage of hardcoded path name while linking against
#  a shared library (no use of -LPATH -lLIBNAME option)
#
# export GEOMTOOLS_USING_CACHE_FILES=0
#  will not use the cflags/ldflags cache accelerator files
#

opwd=$(pwd)
help=0

SCRIPTNAME="geomtools-config"
COMP=gcc
COMPVER=$(${COMP} --version | head -1 | cut -d ' ' -f 3)
COMPILER=-${COMP}${COMPVER}
COMPILER=

THE_SYSTEM="$(uname -s)-$(uname -m | sed -e 's/ //g')${COMPILER}"

THEPACK_ROOT=/usr/local
if [ -n "${GEOMTOOLS_ROOT}" ]; then
    THEPACK_ROOT="${GEOMTOOLS_ROOT}" 
else 
    echo "${SCRIPTNAME}: error: 'GEOMTOOLS_ROOT' environment variable is not defined!" 
    exit 1
fi

THEPACK_INCLUDEDIR="${THEPACK_ROOT}/include" 

THEPACK_LIBDIR="${THEPACK_ROOT}/${THE_SYSTEM}/lib" 

THEPACK_BINDIR="${THEPACK_ROOT}/${THE_SYSTEM}/bin" 

THEPACK_VERSION="?"
if [ -f "${THEPACK_ROOT}/VERSION" ]; then
    THEPACK_VERSION="$(cat ${THEPACK_ROOT}/VERSION)"    
elif [ -f "${THEPACK_ROOT}/pkgtools.d/package.info"  ]; then
    version=$(cat ${THEPACK_ROOT}/pkgtools.d/package.info | grep "version=" | cut -d'=' -f2 )    
    THEPACK_VERSION=${version}
fi
THEPACK_LABEL="geomtools-${THEPACK_VERSION}" 

using_cache_files=0 # default: do not use cache files 
if [ "x${GEOMTOOLS_USING_CACHE_FILES}" != "x" ]; then
    if [ "x${GEOMTOOLS_USING_CACHE_FILES}" = "x1" ]; then
	using_cache_files=1
    else
	using_cache_files=0
    fi
fi

cache_dir=/tmp/${USER}
if [ ${using_cache_files} -eq 1 ]; then
    if [ "x${PKGTOOLS_CACHE_DIR}" != "x" ]; then
	cache_dir=${PKGTOOLS_CACHE_DIR}
    fi
    if [ ! -d ${cache_dir} ]; then
	mkdir -p ${cache_dir}
	if [ $? -ne 0 ]; then
	    echo "$SCRIPTNAME: error: Cannot create cache directory !" 1>&2
	    exit 1
	fi
    fi
fi

cflags_cache=${cache_dir}/.${THEPACK_LABEL}.cflags.cache
ldflags_cache=${cache_dir}/.${THEPACK_LABEL}.ldflags.cache

if [ ${using_cache_files} -eq 0 ]; then
    test -d ${cflags_cache} && rm -f ${cflags_cache}
    test -d ${ldflags_cache} && rm -f ${ldflags_cache}
fi

ldflags_mode=""
if [ "X${GEOMTOOLS_LDFLAGS_MODE}" != "X" ]; then
    ldflags_mode="${GEOMTOOLS_LDFLAGS_MODE}"
fi

with_ebio=1
if [ "x${GEOMTOOLS_NO_EBIO}" == "x1" ]; then
    with_ebio=0
fi

opt=$1

if [ "x$opt" = "x" ]; then
    echo "${SCRIPTNAME}: error: Missing option!" 
    help=1
fi

if [ "x$opt" = "x--help" -o "x$opt" = "x-h" -o "x$opt" = "x-?" ]; then
    help=1
fi

if [ $help -eq 1 ]; then
    cat<<EOF
Usage: $SCRIPTNAME [OPTION]

Known values for OPTION are:

  --prefix              show geomtools installation prefix
  --incdir              print include directory
  --libdir              print library directory
  --bindir              print binary directory
  --include             print include path pre-processor flags without dependencies 
  --cflags              print include path pre-processor flags with dependencies
  --libs                print library linking information, without dependencies
  --ldflags             
  --libs-depends        print library linking information, with dependencies
  --help                print this help then exit
  --version             print version information
  --system              print system
  --check               check dependencies and setup
  --clean-cache-files   clean compile/link cache files
  --with-python         print if Python module is used
  --python-version      print Python version
  --with-ebio           print if Boost/Serialization code is prebuilt and embedded in the DLL

EOF
    exit 1
fi 

if [ "x$opt" = "x--system" ]; then
    echo "${THE_SYSTEM}"
    exit 0
fi 

if [ "x$opt" = "x--prefix" ]; then
    echo "${THEPACK_ROOT}"
    exit 0
fi 

if [ "x$opt" = "x--version" ]; then
    echo "${THEPACK_VERSION}"
    exit 0
fi 

if [ "x$opt" = "x--python-version" ]; then
    if [ "x${DATATOOLS_PYTHON_VERSION}" != "x" ]; then
	echo ${DATATOOLS_PYTHON_VERSION}
    else
	echo -n "2.5"
	echo -n " (assumed)" >&2
	echo ""
	exit 1
    fi
    exit 0
fi 

if [ "x$opt" = "x--with-python" ]; then
    echo "${with_boost_python}"
    exit 0
fi 

if [ "x$opt" = "x--with-ebio" ]; then
    echo "${with_ebio}"
    exit 0
fi 

if [ "x$opt" = "x--clean-cache-files" ]; then
    if [ -f ${cflags_cache} ]; then
	echo "${SCRIPTNAME}: NOTICE: Removing '${cflags_cache}' cache file !" >&2
	rm -f ${cflags_cache}
    fi
    if [ -f ${ldflags_cache} ]; then
	echo "${SCRIPTNAME}: NOTICE: Removing '${ldflags_cache}' cache file !" >&2
	rm -f ${ldflags_cache}
    fi
    exit 0
fi

if [ "x$opt" = "x--incdir" ]; then
    echo "${THEPACK_INCLUDEDIR}" 
    exit 0
fi

if [ "x$opt" = "x--include" ]; then
    echo "-I${THEPACK_INCLUDEDIR} " 
    exit 0
fi

if [ "x$opt" = "x--cflags" ]; then
    generate_cflags=0
    cflags_cache_effective=${cflags_cache}
    if [ ${using_cache_files} -eq 1 ]; then
	if [ -f ${cflags_cache} ]; then
	    cat ${cflags_cache}
	    exit 0
	else
	    generate_cflags=1
	fi
    else
	test -f ${cflags_cache} && rm -f ${cflags_cache}
        generate_cflags=1
	cflags_cache_effective=
    fi
	    
    if [ ${generate_cflags} -eq 1 ]; then
	(
	    (
		echo -n \
		    "-fPIC " \
		    "-I${THEPACK_INCLUDEDIR} "  
		if [ ${with_ebio} -eq 0 ]; then
		    echo -n "-DGEOMTOOLS_NO_EBIO=1 "
		fi
		echo -n \
		    "`datatools-config --cflags` "  \
		    "`mygsl-config --cflags` "  
	    ) \
	    | python ${THEPACK_ROOT}/pkgtools.d/mkuniqueflags.py	    
	) | tee ${cflags_cache_effective}
	test ${using_cache_files} -eq 0 && rm -f ${cflags_cache}
    fi
    exit 0
fi

if [ "x$opt" = "x--libdir" ]; then
    echo "${THEPACK_LIBDIR}"
    exit 0
fi 

if [ "x$opt" = "x--bindir" ]; then
    echo "${THEPACK_BINDIR}"
    exit 0
fi 

if [ "x$opt" = "x--libs" ]; then
    echo "-L${THEPACK_LIBDIR} -lgeomtools "
    exit 0
fi 

if [ "x$opt" = "x--libs-depends" -o "x$opt" = "x--ldflags" ]; then
    generate_ldflags=0
    ldflags_cache_effective=${ldflags_cache}
    if [ ${using_cache_files} -eq 1 ]; then
	if [ -f ${ldflags_cache} ]; then
	    cat ${ldflags_cache}
	    exit 0
	else
	    generate_ldflags=1
	fi
    else
	test -f ${ldflags_cache} && rm -f ${ldflags_cache}
        generate_ldflags=1
	ldflags_cache_effective=
    fi
    
    if [ ${generate_ldflags} -eq 1 ]; then	
	(
	    (
		if [ "X${ldflags_mode}" = "Xhardcoded_shared_lib_path" ]; then
		    echo -n "${THEPACK_LIBDIR}/libgeomtools.so "
		else
		    echo -n "-L${THEPACK_LIBDIR} -lgeomtools "
		fi
		echo -n ""  \
		    "`datatools-config --ldflags` "  \
		    "`mygsl-config --ldflags` "  \
		    ) | python ${THEPACK_ROOT}/pkgtools.d/mkuniqueflags.py -r
	    #echo
	) | tee ${ldflags_cache_effective}
	test ${using_cache_files} -eq 0 && rm -f ${ldflags_cache}
    fi
    exit 0
fi 

if [ "x$opt" = "x--check" ]; then
    cd ${THEPACK_ROOT}
    ${THEPACK_ROOT}/pkgtools.d/pkgtool check
    if [ $? -ne 0 ]; then
	echo "$SCRIPTNAME: error: Check procedure failed!" >&2
	cd ${opwd}
	exit 1
    fi
    cd ${opwd}
    exit 0
fi 

echo "$SCRIPTNAME: error: Unknown option '${opt}'!"  >&2
$0 --help
exit 1

# end of geomtools-config

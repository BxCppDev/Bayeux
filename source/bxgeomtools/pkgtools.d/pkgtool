#!/bin/bash
# -*- mode: shell-script; -*-
# pkgtool
#
# Note:
# This is a default pkgtool script provided by
# the mkskelpack program (from the PkgTools package).
# It suits the use of some default GNU/makefile
# generated in the package 'gmk' directory.
#
# Feel free to modify this file if you use another system
# to build/install this package (i.e. Autotools,CMT).
#

APPNAME="pkgtool"

pack_name=geomtools
pack_name_upper=$(echo ${pack_name} | tr "a-z" "A-Z")
pack_name_lower=$(echo ${pack_name} | tr "A-Z" "a-z")
# startup scripts

sh_ss=${pack_name_lower}.sh
csh_ss=${pack_name_lower}.csh
the_base_dir=.
export GEOMTOOLS_ROOT=$(pwd)

tool_mode=""
do_usage=0
debug=0
verbose=0
###setup_dir=${HOME}
default_python_version=2.5
#python_version=${default_python_version}
with_python=1

function err_msg ()
{
    echo "${APPNAME} (${pack_name}): ERROR: $@" 1>&2
}

function warning_msg ()
{
    echo "${APPNAME} (${pack_name}): WARNING: $@" 1>&2
}

function info_msg ()
{
    test ${verbose} -eq 0 && return
    echo "${APPNAME} (${pack_name}): INFO: $@" 1>&2
}

function notice_msg ()
{
    echo "${APPNAME} (${pack_name}): NOTICE: $@" 1>&2
}

function debug_msg ()
{
    test ${debug} -eq 0 && return
    echo "${APPNAME} (${pack_name}): DEBUG: $@"
}

function print_usage ()
{
    cat <<EOF

  $APPNAME (${pack_name})

  Usage:

    $APPNAME -h         : print this help then exit
  
  Available modes are:

    $APPNAME info       : print package info
    $APPNAME configure [OPTIONS] : configure package 
            OPTIONS:
                          --with-python :
                            with Python wrapper module (default)
                          --with-python-version VERSION :
                            with Python version VERSION (default: 2.5)
                          --without-python :
                            without Python wrapper module
    $APPNAME build [TARGET] : build package
            TARGET:
                lib (default) : build the shared library
                bin : build all executable programs (if any)
                bin_test : build all executable test programs (if any)
             or the name of a specific program, example:
                test_event_id : build only the 'test_event_id'  program
    $APPNAME clean      : clean package
    $APPNAME install    : install package
    $APPNAME uninstall  : uninstall package

EOF
}

#######################################################

parse_switch=1
while [ -n "$1" ]; do
    arg="$1"
    
    if [ "${arg:0:1}" = "-" ]; then
	if [ ${parse_switch} = 0 ]; then
	    break
	    #warning_msg "Options (-X) must be placed before arguments!"
	    #exit 1
	fi
	if [ "${arg}" = "-h" -o "${arg}" = "--help" ]; then
	    do_usage=1 
	elif [ "${arg}" = "-d" -o "${arg}" = "--debug" ]; then
	    debug=1 
	elif [ "${arg}" = "-v" -o "${arg}" = "--verbose" ]; then
	    verbose=1 
	else
	    err_msg "Invalid option!"
	    exit 1
	fi
    else
	parse_switch=0
	if [ -z "${tool_mode}" ]; then
	    if [ "$arg" = "configure" ]; then
		tool_mode="configure"	
	    elif [ "$arg" = "build" ]; then
		tool_mode="build"	
	    elif [ "$arg" = "clean" ]; then
		tool_mode="clean"	
	    elif [ "$arg" = "install" ]; then
		tool_mode="install"	
	    elif [ "$arg" = "uninstall" ]; then
		tool_mode="uninstall"	
	    elif [ "$arg" = "info" ]; then
		tool_mode="info"	
	    else
		err_msg "Invalid argument!"
		exit 1
	    fi
	else
	    # remaining arguments on command line are kept in "$@"
	    break
	fi
    fi
    
    shift 1
done

#######################################################

if [ ${do_usage} = 1 ]; then
    print_usage
    exit 2
fi

if [ -z "${tool_mode}" ]; then
    err_msg "Missing running mode!"
    print_usage
    exit 2
fi

bn=$(basename $(pwd))
if [ "x$bn" = "xpkgtools.d" ]; then
    opwd=$(pwd)
    cd ..
    the_base_dir=$(pwd)
    cd $opwd
    unset opwd
elif [ -d ./pkgtools.d ]; then
    the_base_dir=$(pwd)
else 
    err_msg "Please run 'pkgtools.d/pkgtool' from the base package directory!"
    exit 1    
fi

without_python_flag_file=${the_base_dir}/gmk/geomtools_without_python.config
python_version_flag_file=${the_base_dir}/gmk/geomtools_python_version.config
python_dir=${the_base_dir}/python

#echo "Base package directory is '${the_base_dir}'!"
if [ -d ${the_base_dir}/gmk ]; then
    GMKDIR=${the_base_dir}/gmk
else
    err_msg "Missing gmk directory! Please run 'pkgtools.d/pkgtool' from the base package directory!"
    exit 1    
fi

#######################################################

function do_clean_gmk ()
{
    info_msg "Clean gmk..."
    if [ ! -d ${GMKDIR} ]; then 
	err_msg "do_clean_gmk: Missing '${GMKDIR}' directory!"
	return 1
    fi
    opwd=$(pwd)
    cd ${GMKDIR}
    make clean 
    if [ $? -ne 0 ]; then 
	cd ${opwd}
	return 1
    fi

    ### special Python wrapper/program:
    cd ${python_dir}
    make clean
    cd ${GMKDIR}

    test -f ${without_python_flag_file} && rm -f ${without_python_flag_file}
    test -f ${python_version_flag_file} && rm -f ${python_version_flag_file}

    ###

    cd ${opwd}
    return 0
}

function do_build_gmk ()
{
    info_msg "Build gmk..."
    if [ ! -d ${GMKDIR} ]; then 
	err_msg "do_build_gmk: Missing '${GMKDIR}' directory!"
	return 1
    fi
    opwd=$(pwd)
    cd ${GMKDIR}
    mk_lib=0
    mk_bin=0
    mk_bin_static=0
    build_tag=""
    if [ -z "$1" ]; then
        build_tag="lib"
    else
        build_tag="$1"
    fi  
    old=0
    warning_msg "do_build_gmk: target='${build_tag}'"
    if [ $old -eq 1 ]; then
	if [ -z "$1" ]; then
	    mk_lib=1
	    mk_bin=1
	    mk_bin_static=1
	else
	    if [ "$1" = "lib" -o "$1" = "libs" ]; then
		mk_lib=1
	    fi
	    if [ "$1" = "bin" ]; then
		mk_bin=1
	    fi
	    if [ "$1" = "bin_static" ]; then
		mk_bin_static=1
	    fi
	    if [ "$1" = "all" ]; then
		mk_bin=1
		mk_bin_static=1
	    fi
	    if [ "$1" = "all_bin" -o "$1" = "bin_all" ]; then
		mk_bin=1
		mk_bin_static=1
	    fi
	fi
    #
	if [ $mk_lib = 1 ]; then
	    make || return 1
	fi
	if [ $mk_bin = 1 ]; then
	    make bin || return 1
	fi
	if [ $mk_bin_static = 1 ]; then
	    make bin_static || return 1
	fi
    else
        info_msg "Build target '${build_tag}'..."
        make ${build_tag}
        if [ $? -ne 0 ]; then
            cd ${opwd} 
            err_msg "Build target '${build_tag}' failed!"
            return 1
        fi
    fi

    ### special Python wrapper/program:
    if [ ! -f ${without_python_flag_file} ]; then
	cd ${python_dir}
	make
	if [ $? -ne 0 ]; then
	    cd ${opwd} 
	    err_msg "Build Python stuff failed!"
	    return 1
	fi
	cd ${GMKDIR}
    fi
    ###
    
    cd ${opwd}
    return 0
}

#######################################################

function do_clean()
{
    info_msg "Clean package '${pack_name}'..."
    if [ -d ${GMKDIR} ]; then
	do_clean_gmk $@
	return $?
    fi 
    return 1
}

function do_configure ()
{
    info_msg "Configure package '${pack_name}'..."
    python_version=
    for arg in $@ ; do

	if [ "x${arg}" = "x--with-python" ]; then
	    with_python=1
	fi

	if [ "x${arg}" = "x--with-python-version" ]; then
	    shift 1
	    python_version=$1
	    with_python=1
	fi

	if [ "x${arg}" = "x--without-python" ]; then
	    with_python=0
	fi

    done

    notice_msg "Configure package '${pack_name}': Checking dependencies..."

    which clhep-config 2>&1 > /dev/null
    if [ $? -ne 0 ]; then
	err_msg "CLHEP seems not to be setup!"
	return 1
    else
	clhep_version=$(clhep-config --version | cut -d' ' -f2)
	notice_msg "CLHEP (${clhep_version}) seems to be properly setup!"
    fi

    which gsl-config 2>&1 > /dev/null
    if [ $? -ne 0 ]; then
	err_msg "GSL seems not to be setup!"
	return 1
    else
	gsl_version=$(gsl-config --version)
	notice_msg "GSL (${gsl_version}) seems to be properly setup!"
    fi

    which datatools-config 2>&1 > /dev/null
    if [ $? -ne 0 ]; then
	err_msg "datatools seems not to be setup!"
	return 1
    else
	notice_msg "datatools ($(datatools-config --version)) seems to be properly setup!"
    fi

    notice_msg "Configure package '${pack_name}': Python setup..."
    check_boost_python=$(boost-config --with-python)
    if  [ ${check_boost_python} -eq 0 ]; then
	err_msg "Boost has no Python library!"
	return 1
    fi
    boost_python_version="$(boost-config --python-version)"
    if [ "x${boost_python_version}" = "x" ]; then
	err_msg "Boost has no known Python version!"
	return 1
    else
	notice_msg "Boost has Python version '${boost_python_version}'"
    fi
    if [ "x${python_version}" = "x" ]; then
	warning_msg "Force Boost Python version!"
	python_version=${boost_python_version}
    fi
    if [ ${with_python} -eq 0 ]; then
	warning_msg "Do not use Python wrapper module from Boost.Python!"

	cat > ${without_python_flag_file} <<EOF 
# geomtools does not use python wrapper module:
export GEOMTOOLS_NO_PYTHON=1
EOF
    else
	if [ "x${python_version}" != "x${boost_python_version}" ]; then
	    err_msg "Unmatching Python version with Boost! Boost uses Python ${boost_python_version}!"
	    return 1
	else
	    notice_msg "Python version ${python_version} matches with the one used by Boost (${boost_python_version})!"
	fi 
	which python${python_version}-config 2>&1 > /dev/null
	if [ $? -ne 0 ]; then
	    err_msg "Python ${python_version} is not setup!"
	    return 1
	else
	    notice_msg "Python ${python_version} is setup!"
	    echo "${python_version}" > ${python_version_flag_file}
	fi
	notice_msg "Use Python wrapper module from Boost.Python!"
	test -f ${without_python_flag_file} && rm -f ${without_python_flag_file}
    fi

    notice_msg "Configure package '${pack_name}': done."
    return 0
}

function do_build ()
{
    info_msg "Build package '${pack_name}'..."
    if [ -d ${GMKDIR} ]; then
	if [ -f ${without_python_flag_file} ]; then
	    source ${without_python_flag_file}
	fi
	do_build_gmk $@
	return $?
    fi
    return 1
}

function do_startup ()
{
cat<<EOF

Setup scripts:

  '${the_base_dir}/${sh_ss}' for sh-shells

and  

  '${the_base_dir}/${csh_ss}' for csh-shells

have been generated.

You may source these scripts at startup time 
(i.e. from your '~/.bashrc' or '~/.(t)cshrc' files).

EOF
}

function kill_startup ()
{
    cat<<EOF
Don't forget to remove environment variables in your startup scripts.
Particularly, you should not source the following scripts anymore
from your '~/.bashrc' or '~/.(t)cshrc' files:

  '${the_base_dir}/${sh_ss}' for sh-shells

and  

  '${the_base_dir}/${csh_ss}' for csh-shells

EOF
}

function do_install ()
{
    debug_msg "do_install: Entering..."
    info_msg "Install package '${pack_name}'..."
    opwd=$(pwd)
    cd ${GMKDIR}
    make install 
    if [ $? -ne 0 ]; then 
	cd ${opwd}
	return 1
    fi

    ### special Python wrapper/program:
    if [ ! -f ${without_python_flag_file} ]; then
	cd ${python_dir}
	make install
	cd ${GMKDIR}
    fi
    ###

    cd ${opwd}
    debug_msg "do_startup..."
    do_startup
    debug_msg "ok"
    return 0
}

function do_uninstall ()
{
    info_msg "Uninstall package '${pack_name}'... The"
    opwd=$(pwd)
    cd ${GMKDIR}
    make uninstall 
    if [ $? -ne 0 ]; then 
	cd ${opwd}
	return 1
    fi

    ### special Python wrapper/program:
    cd ${python_dir}
    make uninstall
    cd ${GMKDIR}
    ###

    cd ${opwd}
    kill_startup
    return 0
}

function do_info ()
{
    pkg_version="undefined"
    pkg_lang="undefined"
    pkg_creation="undefined"
    pkg_authors="undefined"
    pkg_deps="undefined"
    if [ -f ./VERSION ]; then
	pkg_version=$(cat ./VERSION)
    fi
    pkg_build="undefined"
    if [ -d ${GMKDIR} -a -f ${GMKDIR}/GNUmakefile ]; then
	pkg_build="GNU-make"
    fi
    if [ -f ./configure.ac -o -f ./configure.in ]; then
	pkg_build="Autotools"
    fi
    echo "This is package '${pack_name}' (version ${pkg_version})" #1>&2
    
    pkgi_file="./pkgtools.d/package.info"
    if [ -f ${pkgi_file} ]; then
	pkg_lang=$(cat ${pkgi_file} | grep "language=" | cut -d= -f2)
	pkg_creation=$(cat ${pkgi_file} | grep "creation=" | cut -d= -f2)
	pkg_authors=$(cat ${pkgi_file} | grep "author=" | cut -d= -f2)
	pkg_deps=$(cat ${pkgi_file} | grep "dependencies=" | cut -d= -f2)
	pkg_namespace=$(cat ${pkgi_file} | grep "namespace=" | cut -d= -f2)
	echo -e "\tName               : ${pack_name}"
	echo -e "\tVersion            : ${pkg_version}"
	echo -e "\tLanguage is        : ${pkg_lang}"
	echo -e "\tDependencies are   : ${pkg_deps}"
	echo -e "\tAuthors            : ${pkg_authors}"
	echo -e "\tCreation date      : ${pkg_creation}"
	if [ "${pkg_lang}" = "C++" ]; then
	    echo -e "\tNamespace          : ${pkg_namespace}"
	fi
	echo -e "\tBuild method       : ${pkg_build}"
    fi

}

#######################################################

if [ "${tool_mode}" = "configure" ]; then
    do_configure $@
    if [ $? -ne 0 ]; then
	err_msg "Configure failed!"
	exit 1
    fi
fi

if [ "${tool_mode}" = "build" ]; then
    do_build $@
    if [ $? -ne 0 ]; then
	err_msg "Build failed!"
	exit 1
    fi
fi

if [ "${tool_mode}" = "clean" ]; then
    do_clean
    if [ $? -ne 0 ]; then
	err_msg "Clean failed!"
	exit 1
    fi
fi

if [ "${tool_mode}" = "install" ]; then
    do_install
    if [ $? -ne 0 ]; then
	err_msg "Install failed!"
	exit 1
    fi
fi

if [ "${tool_mode}" = "uninstall" ]; then
    do_uninstall
    if [ $? -ne 0 ]; then
	err_msg "Uninstall failed!"
	exit 1
    fi
fi

if [ "${tool_mode}" = "info" ]; then
    do_info
    if [ $? -ne 0 ]; then
	err_msg "Info failed!"
	exit 1
    fi
fi

exit 0

# end of pkgtool
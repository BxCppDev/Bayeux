//! \file    Bayeux/electronics/version.h
//! \brief   Describe the Bayeux/electronics API version
//! \details Querying the version of Bayeux/electronics is needed at both
//!          compile and runtime by clients so that they may adjust
//!          their usage.
//
// Copyright (c) 2013 by Ben Morgan <bmorgan.warwick@gmail.com>
// Copyright (c) 2013 by The University of Warwick
//
// This file is part of Bayeux/electronics.
//
// Bayeux/electronics is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Bayeux/electronics is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Bayeux/electronics.  If not, see <http://www.gnu.org/licenses/>.

#ifndef ELECTRONICS_VERSION_H
#define ELECTRONICS_VERSION_H
// Standard Library
#include <string>

//----------------------------------------------------------------------
// - Compile Time API
//! Major version number of electronics
#define ELECTRONICS_VERSION_MAJOR @electronics_VERSION_MAJOR@

//! Minor version number of cuts
#define ELECTRONICS_VERSION_MINOR @electronics_VERSION_MINOR@

//! Patch version number of cuts
#define ELECTRONICS_VERSION_PATCH @electronics_VERSION_PATCH@

//! Encode cuts to ordered integer available at compile time
#define ELECTRONICS_ENCODE_VERSION(major, minor, patch) ( \
        ((major) * 10000) \
      + ((minor) *   100) \
      + ((patch) *     1))

//! Integer encoded cuts version available at compile time
#define ELECTRONICS_VERSION ELECTRONICS_ENCODE_VERSION( \
        ELECTRONICS_VERSION_MAJOR, \
        ELECTRONICS_VERSION_MINOR, \
        ELECTRONICS_VERSION_PATCH)

//! String encoded full version number, e.g. "1.2.3", available at compile time
#define ELECTRONICS_LIB_VERSION "@electronics_VERSION@"

//! Check current version >= (major, minor, patch) at compile time
#define ELECTRONICS_IS_AT_LEAST(major,minor,patch) ( \
        ELECTRONICS_VERSION >= \
        ELECTRONICS_ENCODE_VERSION(major,minor,patch))

//----------------------------------------------------------------------
// Runtime API
namespace electronics {
//! \brief Describe the electronics API version and features
struct version {
//! Return the major version number of electronics, e.g., 1 for '1.2.3'
static int get_major();

//! Return the minor version number of electronics, e.g., 2 for '1.2.3'
static int get_minor();

//! Return the patch version number of electronics, e.g., 3 for '1.2.3'
static int get_patch();

//! Return the full version number of electronics as a string, e.g., '1.2.3'
static std::string get_version();

//! Return true if the current electronics version >= (major, minor, patch)
static bool is_at_least(int major, int minor, int patch);

//! Return true if the named feature is available in electronics
static bool has_feature(const std::string& feature);
};
} // namespace electronics

#endif // ELECTRONICS_VERSION_H

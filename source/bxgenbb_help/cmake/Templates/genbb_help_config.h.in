// -*- mode: c++; -*- 
/* genbb_help_config.h header file 
 */

#ifndef __genbb_help_genbb_help_config_h
#define __genbb_help_genbb_help_config_h 1

/*** brio versioning information ***/

//  GENBB_HELP_VERSION % 100        is the patch level
//  GENBB_HELP_VERSION / 100 % 1000 is the minor version
//  GENBB_HELP_VERSION / 100000     is the major version

#define GENBB_HELP_VERSION_MAJOR @genbb_help_VERSION_MAJOR@
#define GENBB_HELP_VERSION_MINOR @genbb_help_VERSION_MINOR@
#define GENBB_HELP_PATCH_VERSION @genbb_help_PATCH_VERSION@

#define GENBB_HELP_VERSION @genbb_help_VERSION_NUMERIC@

//  GENBB_HELP_LIB_VERSION must be defined to be the same as GENBB_HELP_VERSION
//  but as a *string* in the form "x.y[.z]" where x is the major version
//  number, y is the minor version number, and z is the patch level if not 0.

#define GENBB_HELP_LIB_VERSION "@genbb_help_VERSION_STR@"

/*** genbb_help debug flag ***/
#cmakedefine01 GENBB_HELP_WITH_DEBUG

/*** genbb_help embedded Boost/Serialization based I/O ***/
#if x1 == x1
#cmakedefine01 GENBB_HELP_WITH_BIO 
#endif

/*** genbb_help Boost/Python module ***/
#if x0 == x1
#cmakedefine01 GENBB_HELP_WITH_PYTHON_WRAPPER
#endif

//#include <genbb_help/detail/__genbb_help_FC.h>
//#include <genbb_help/detail/__genbb_help_FC2.h>

namespace genbb
{
  struct library_config
  {
    /**
     *   The former genbb_help versions (prior to 1.1) have used
     *   old-fashionned serialization tag for 'primary_particle'
     *   and 'primary_event' classes.
     *   This has been changed from version 1.2.
     *   If set at true this flag will use the old tags.
     *   Default is false.
     */
    static bool g_use_old_serialization_tag;
    
    // Set the \e old \e serialization \e tag flag:
    static void set_use_old_serialization_tag ( bool u_ );
    
  };

}

#endif // __genbb_help_genbb_help_config_h

// end of genbb_help_config.h

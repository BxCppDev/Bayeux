#!/usr/bin/env bash

opwd=$(pwd)
genbb_help_version=@genbb_help_VERSION@
this_bxapp="bxgenbb_mkskelcfg"

function my_exit()
{
    cd ${opwd}
    exit $1
}

function splash()
{
    cat<<EOF

        G E N B B    M K S K E L C F G
        Version ${genbb_help_version}
        Bayeux version @Bayeux_VERSION@

        Copyright (C) 2013
        Francois Mauger, Xavier Garrido and Ben Morgan

        command line help: type "${this_bxapp} --help"

EOF
    return
}

function print_usage()
{
    cat<<EOF

${this_bxapp} -- Build and populate a skeleton configuration directory
                 for the genbb_help primary event generator manager.

Usage:

   ${this_bxapp} -h|--help     : Print this help then exit.

   ${this_bxapp} -V|--version  : Print the current version then exit.

   ${this_bxapp} -d|--debug    : Switch on debug mode and messages.

   ${this_bxapp} -c|--config-base-dir arg  :
                                      Make 'arg' be the configuration base directory
                                      where to store the configuration files
                                      describing the virtual geometry of the
                                      setup.
                                      Example:
                                        --config-base-dir "."

   ${this_bxapp} -l|--setup-label arg  :
                                      Set the label of the setup to 'arg'.
                                      Example:
                                        --setup-label "my_setup"

   ${this_bxapp} -v|--setup-version arg  :
                                      Set the version of the setup to 'arg'.
                                      Example:
                                        --setup-version "0.1"

   ${this_bxapp} -m|--registered-module arg :
                                      Use the registered base directory from the
                                      module/library 'arg'. Used file path syntax
                                      is: "@arg:path/to/setup/file.conf".
                                      Example:
                                        --registered-module "my_setup"

   ${this_bxapp} -p|--skeleton-profile arg :
                                      Use the skeleton profile 'arg'.
                                      Default value is: '${default_skeleton_profile}'.
                                      Example:
                                        --skeleton-profile "${default_skeleton_profile}"

EOF
    return
}

interactive=0
splash=1
debug=0
version=0
help=0
default_config_base_dir="."
config_base_dir=""
default_setup_label="my_setup"
setup_label=""
default_setup_version="0.1"
setup_version=""
known_skeleton_profiles="calib"
default_skeleton_profile="calib"
skeleton_profile=""
registered_module=""
env_config_dir=""

while [ -n "$1" ]; do
    token="$1"
    #echo "NOTICE: Command line token is : '${token}' !" >&2
    if [ "x${token:0:1}" = "x-" ]; then
        option="$token"
	#echo "NOTICE: Command line option is : '${option}' !" >&2
        if [  ${option} = "-V" -o ${option} = "--version" ]; then
	    version=1
	elif [ ${option} = "-h" -o ${option} = "--help" ]; then
	    help=1
	elif [ ${option} = "-i" -o ${option} = "--interactive" ]; then
	    interactive=1
	elif [ ${option} = "-d" -o ${option} = "--debug" ]; then
	    debug=1
	elif [ ${option} = "-c" -o ${option} = "--config-base-dir" ]; then
	    shift 1
	    config_base_dir="$1"
	elif [ ${option} = "-l" -o ${option} = "--setup-label" ]; then
	    shift 1
	    setup_label="$1"
	elif [ ${option} = "-v" -o ${option} = "--setup-version" ]; then
	    shift 1
	    setup_version="$1"
	elif [ ${option} = "-p" -o ${option} = "--skeleton-profile" ]; then
	    shift 1
	    skeleton_profile="$1"
	elif [ ${option} = "-m" -o ${option} = "--registered-module" ]; then
	    shift 1
	    registered_module="$1"
	elif [ ${option} = "-e" -o ${option} = "--env-base-path" ]; then
	    shift 1
	    env_config_dir="$1"
	fi
    else
        argument="$token"
	echo "WARNING: Ignoring command line argument '${argument}' !" >&2
    fi
    shift 1
done

if [ $splash -eq 1 ]; then
    splash
fi

if [ $version -eq 1 ]; then
    echo "${genbb_help_version}"
    my_exit 0
fi

if [ $help -eq 1 ]; then
    print_usage
    my_exit 0
fi

function ui_read()
{
    default_value="$1"
    read value
    if [ "x${value}" = "x" ]; then
	value="${default_value}"
    fi
    eval "echo ${value}"
    #echo "${value}"
    return 0
}

function ui_dialog()
{
    echo -n "Enter the setup label [${setup_label}]: " >&2
    setup_label=$(ui_read "${setup_label}")

    echo -n "Enter the setup version [${setup_version}]: " >&2
    setup_version=$(ui_read "${setup_version}")

    echo -n "Enter the name/label of the skeleton profile [${skeleton_profile}]: " >&2
    skeleton_profile=$(ui_read "${skeleton_profile}")

    echo -n "Enter the configuration base directory [${config_base_dir}]: " >&2
    config_base_dir=$(ui_read "${config_base_dir}")

    if [ "x${config_base_dir}" = "x" ]; then
	echo -n "Enter the name/label of the registered module/library [${registered_module}]: " >&2
	registered_module=$(ui_read "${registered_module}")

	if [ "x${registered_module}" = "x" ]; then
	    echo "Enter the name of the environment variable that addresses" >&2
	    echo -n "  the configuration base directory [${env_config_dir}]: " >&2
	    env_config_dir=$(ui_read "${env_config_dir}")
	fi
    fi
    return 0;
}

if [ ${interactive} -eq 1 ]; then
    if [ $debug -eq 1 ]; then
	echo "DEBUG: Entering interactive dialog..." >&2
    fi
    ui_dialog
    if [ $? -ne 0 ]; then
	echo "ERROR:  User dialog failed ! Abort !" >&2
	my_exit 1
    fi
fi

if [ -z "$config_base_dir" ]; then
    config_base_dir="$default_config_base_dir"
fi

if [ -z "$setup_label" ]; then
    setup_label="$default_setup_label"
fi

if [ -z "$setup_version" ]; then
    setup_version="$default_setup_version"
fi

if [ -z "$skeleton_profile" ]; then
    skeleton_profile="$default_skeleton_profile"
fi

echo "${known_skeleton_profiles}" | tr [[:space:]] ' ' | tr -s ' ' | tr ' ' '\n'  | grep $skeleton_profile > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "ERROR: Profile '${skeleton_profile}' is not valid ! Abort !" >&2
    my_exit 1
fi

setup_label_path=$(echo "${setup_label}" | sed -e 's%::%/%g' -e 's%[[:space:]]%_%g')
setup_base_dir="${config_base_dir}/${setup_label_path}/simulation/primary_events/${setup_version}"
if [ "x${setup_base_dir:0:2}" = "x./" ]; then
    setup_base_dir="${setup_base_dir:2}"
fi
if [ $debug -eq 1 ]; then
    (
    echo "DEBUG: config_base_dir='${config_base_dir}'"
    echo "DEBUG: setup_label='${setup_label}'"
    echo "DEBUG: setup_label_path='${setup_label_path}'"
    echo "DEBUG: setup_version='${setup_version}'"
    echo "DEBUG: setup_base_dir='${setup_base_dir}'"
    echo "DEBUG: registered_module='${registered_module}'"
    echo "DEBUG: skeleton_profile='${skeleton_profile}'"
    echo "DEBUG: env_config_dir='${env_config_dir}'"
    ) >&2
fi

if [ -d ${setup_base_dir} ]; then
    echo "ERROR: Directory '${setup_base_dir}' already exists ! Abort !" >&2
    my_exit 1
fi

mkdir -p ${setup_base_dir}
if [ $? -ne 0 ]; then
    echo "ERROR: Directory '${setup_base_dir}' was not created ! Abort !" >&2
    my_exit 1
fi

### bxocd_manual --class-id "genbb_help::manager" --action skeleton --output-file ${setup_base_dir}/manager.conf.example

config_prefix=""
# In case of relative path to configuration files:
if [ "x${setup_base_dir:0:1}" != "x/" ]; then
    if [ "x${registered_module}" != "x" ]; then
	config_prefix="@${registered_module}:"
    elif [ "x${env_config_dir}" != "x" ]; then
	config_prefix="\${${env_config_dir}}/"
    else
	env_config_dir="SETUP_CONFIG_DIR"
	config_prefix="\${${env_config_dir}}/"
    fi
fi

# Skeleton profile 'calib' implements a simple geometry setup
# with two 'source' physical volumes and four 'detector' physical
# volumes.
function populate_genbb_config_calib()
{
    echo "NOTICE: Populating skeleton profile 's2d4'..." >&2
    _dbq="\`\`"

    #######################################################################
    cat > ${setup_base_dir}/README.rst <<EOF
Primary event generation setup ${_dbq}${setup_label}${_dbq} (version ${_dbq}${setup_version}${_dbq})
==============================================================================

This   README   file  has   been   automatically   generated  by   the
${_dbq}${this_bxapp}${_dbq} script to describe a skeleton directory with a
set of toy configuration  files.  From this sample directory,
you can now build your own manager of primary event generators.

Files
-----

 * ${_dbq}README.rst${_dbq} : This file.
 * ${_dbq}manager.conf${_dbq} : The main configuration file for the geometry manager.
 * ${_dbq}generators.def${_dbq} : Contains the definition of primary event generators.

Genbb inspector
------------------

Run the Bayeux/genbb_help inspector program: ::

EOF

if [ "x${registered_module}" != "x" ]; then
    cat >> ${setup_base_dir}/README.rst <<EOF
  $ bxgenbb_inspector \\
      --datatools::resource_path toto@${config_base_dir} \\
      --configuration "${setup_base_dir}/manager.conf" \\
      --action "list"

EOF
elif [ "x${env_config_dir}" != "x" ]; then
    cat >> ${setup_base_dir}/README.rst <<EOF
  $ ${env_config_dir}=${config_base_dir} \\
    bxgenbb_inspector \\
      --configuration "${setup_base_dir}/manager.conf" \\
      --action "list"

EOF
else
   cat >> ${setup_base_dir}/README.rst <<EOF
  $ bxgenbb_inspector \\
      --configuration "${setup_base_dir}/manager.conf" \\
      --action "list"

EOF
fi
    #######################################################################
    cat > ${setup_base_dir}/manager.conf <<EOF
# List of configuration properties (datatools::properties).
# Lines starting with '#@' are special directives.
# Lines starting with '#' are simple comments.

#@description The logging priority threshold
### logging.priority : string = "warning"

#@description List of files containing the definition of primary event generators'
generators.configuration_files : string[1] as path = \\
  "${config_prefix}${setup_base_dir}/generators.def"

EOF

    #######################################################################
    cat > ${setup_base_dir}/generators.def <<EOF
# -*- mode: conf-unix; -*-
# List of multi-properties (datatools::multi_properties):

#@description The list of calibration radioactive decay generators

#@key_label   "name"
#@meta_label  "type"


###################################
[name="Co60" type="genbb::wdecay0"]
#@config Co-60 decay [calibration]

#@description The category of decay (genbb/decay0 syntax)
decay_type    : string  = "background"

#@description the decaying isotope  (genbb/decay0 syntax)
decay_isotope : string  = "Co60"


####################################
[name="Bi207" type="genbb::wdecay0"]
#@config Bi-207 decay [calibration]

#@description The category of decay (genbb/decay0 syntax)
decay_type    : string  = "background"

#@description The decaying isotope  (genbb/decay0 syntax)
decay_isotope : string  = "Bi207+Pb207m"


####################################
[name="Am241" type="genbb::wdecay0"]
#@config Am-241 decay [calibration]

#@description The category of decay (genbb/decay0 syntax)
decay_type    : string  = "background"

#@description The decaying isotope  (genbb/decay0 syntax)
decay_isotope : string  = "Am241"

# end
EOF

    return 0
}

if [ "${skeleton_profile}" = "calib" ]; then
    populate_genbb_config_calib
    if [ $? -ne 0 ]; then
	echo "ERROR: Function 'populate_genbb_config_calib' failed ! Abort !" >&2
	# rm -fr ${setup_base_dir}
	my_exit 1
    fi
else
    echo "ERROR: Unknown skeleton profile '${skeleton_profile}' ! Abort !" >&2
    my_exit 1
fi

echo -e "Virtual genbb configuration directory for\nsetup with label '${setup_label}' and version '${setup_version}' : \n" >&2
echo "###############################################################" >&2
which tree > /dev/null 2>&1 && LANG=C tree ${setup_base_dir} || ls -R ${setup_base_dir}
echo "###############################################################" >&2

my_exit 0

# end

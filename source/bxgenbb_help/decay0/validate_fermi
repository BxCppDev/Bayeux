#!/usr/bin/env bash 
# -*- mode: shell-script; -*- 
# validate_fermi

APPNAME="validate_fermi"

opwd=$(pwd)
	
function my_exit ()
{
    cd ${opwd}
    exit $1
}

appname=${APPNAME} 
appversion=0.1 

the_base_dir=$(pwd)

# uncomment for usage related to a pkgtools managed package:
if [ "x${GENBB_HELP_ROOT}" = "x" ]; then
    echo " ERROR: ${appname}: GENBB_HELP_ROOT is not defined ! Abort !" >&2  
    my_exit 1
else
    if [ ! -d ${__PACKAGE_ROOT__} ]; then
	echo " ERROR: ${appname}: GENBB_HELP_ROOT directory does not exist ! Abort !" >&2  
	my_exit 1
    fi
    the_base_dir=${__PACKAGE_ROOT__}
fi

libpkgtools_sourced=0

pkgtools_root=${PKGTOOLS_ROOT}
if [ ${libpkgtools_sourced} -eq 0 ]; then
    if [ "x${pkgtools_root}" != "x" ]; then
	if [ -f ${pkgtools_root}/lib/libpkgtools.sh ]; then
	    source ${pkgtools_root}/lib/libpkgtools.sh
	    libpkgtools_sourced=1
	fi
    fi
fi

if [ ${libpkgtools_sourced} -eq 0 ]; then
    libpkgtools_sh=${the_base_dir}/pkgtools.d/libpkgtools.sh 
    if [ -f ${libpkgtools_sh} ]; then
	source ${libpkgtools_sh}    
	libpkgtools_sourced=1
    fi
fi

if [ ${libpkgtools_sourced} -eq 0 ]; then
    echo " ERROR: ${appname}: Cannot find any 'libpkgtools.sh' setup file ! Abort !" >&2  
    my_exit 1
fi

pkgtools__msg_not_using_quiet
pkgtools__msg_not_using_verbose
pkgtools__msg_not_using_debug
pkgtools__msg_not_using_devel
pkgtools__msg_not_using_date
pkgtools__msg_using_color
pkgtools__ui_interactive
pkgtools__ui_not_using_gui

function print_usage ()
{
    cat <<EOF

  ${appname} -- Description

  Usage:

    ${appname} [Options...] [Args...]

  Options:

    -h 
    --help    : print this help then exit

    --version  : print version then exit

    -d 
    --debug   : print debug mode informations

    -D 
    --devel   : print devel mode informations

    -v 
    --verbose : verbose print

    -i      
    --interactive  : run in interactive mode (this is the default)

    -b      
    --batch        : run in batch mode (no user interaction, disable GUI features)

    --no-color     : use un-colored message output

    --gui          : use GUI user interface (interactive mode only)

  Examples:

    shell> ${appname} --help
 
EOF
    return 0
}

#######################################################

the_first_arg=
#the_second_arg=
the_remaining_options=
display=1

parse_switch=1
while [ -n "$1" ]; do
    token="$1"
    if [ "${token:0:1}" = "-" ]; then
	opt=${token}
	if [ ${parse_switch} -eq 0 ]; then
	    break
	fi
	if [ "${opt}" = "-h" -o "${opt}" = "--help" ]; then
	    print_usage
	    my_exit 0
	elif [ "${opt}" = "--version" ]; then
	    echo ${appversion}
	    my_exit 0
	elif [ "${opt}" = "-d" -o "${opt}" = "--debug" ]; then
	    pkgtools__msg_using_debug
	elif [ "${opt}" = "-D" -o "${opt}" = "--devel" ]; then
	    pkgtools__msg_using_devel
	elif [ "${opt}" = "-v" -o "${opt}" = "--verbose" ]; then
	    pkgtools__msg_using_verbose
	elif [ "${opt}" = "-i" -o "${opt}" = "--interactive" ]; then
	    pkgtools__ui_interactive
	elif [ "${opt}" = "-b" -o "${opt}" = "--batch" ]; then
	    pkgtools__ui_batch
	elif [ "${opt}" = "--no-color" ]; then
	    pkgtools__msg_not_using_color
	elif [ "${opt}" = "-G" -o "${opt}" = "--gui" ]; then
	    pkgtools__ui_using_gui
	    pkgtools__msg_devel "Using GUI" 	
	else
	    pkgtools__msg_error "Invalid option '${opt}' !" 
	    my_exit 1
	    # pkgtools__msg_warning "Ignoring option '${opt}' !" 
	fi
    else
	arg=${token}
	parse_switch=0
	if [ "x${the_first_arg}" = "x" ]; then
	    the_first_arg="${arg}"	
	# elif [ "x${the_second_arg}" = "x" ]; then
	#     the_second_arg="${arg}"	
	else
	    pkgtools__msg_error "Invalid argument '${arg}' !"
	    my_exit 1
	    # pkgtools__msg_warning "Ignoring argument '${arg}' !" 
	    # break
	fi
    fi
    shift 1
done

the_remaining_options="$@"
pkgtools__msg_devel "the_first_arg=${the_first_arg}"
#pkgtools__msg_devel "the_second_arg=${the_second_arg}"
pkgtools__msg_devel "remaining_options=${the_remaining_options}"

# Batch mode:
pkgtools__ui_is_interactive
if [ $? -ne 0 ]; then
    pkgtools__ui_not_using_gui
fi

function test_decay0_fermi_func ()
{
    __pkgtools__at_function_enter test_decay0_fermi_func
    
    if [ ! -x test_fermi ]; then
	make 
	if [ $? -ne 0 ]; then
	    pkgtools__msg_error "Cannot make the test_fermi executable !"
	    __pkgtools__at_function_exit
	    return 1
	fi
    fi
    
    #./test_fermi 
    ./test_fermi > test_fermi.data
    
    genbb_executable=$(genbb_help-config --bindir)/test_fermi
    if [ ! -x ${genbb_executable} ]; then
	pkgtools__msg_error "The '${genbb_executable}' executable is not available !"
	__pkgtools__at_function_exit
	return 1
    fi
    #${genbb_executable} > /dev/null
    ${genbb_executable} > test_fermi_val.data

    (echo "set terminal postscript color solid" ; cat test_fermi.gp) | gnuplot > test_fermi_plot.ps

    if [ ${display} -eq 1 ]; then
    	gv test_fermi_plot.ps &
    fi
    
    __pkgtools__at_function_exit
    return 0
}

##########################################################

function main ()
{
    __pkgtools__at_function_enter main

    test_decay0_fermi_func 

    __pkgtools__at_function_exit
    return 0
}

##########################################################

main 
if [ $? -ne 0 ]; then
    pkgtools__msg_error "Failure !"
    my_exit 1
fi
my_exit 0

# end of validate_fermi

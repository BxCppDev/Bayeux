// resource.cc - Implementation of genbb_help resource
//
// Copyright (c) 2013 by Ben Morgan <bmorgan.warwick@gmail.com>
// Copyright (c) 2013 by The University of Warwick
//
// This file is part of genbb_help.
//
// genbb_help is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// genbb_help is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with genbb_help.  If not, see <http://www.gnu.org/licenses/>.

// Ourselves
#include <genbb_help/resource.h>

// Standard Library
#include <iostream>
#include <fstream>
#include <cstdlib>

// Third Party
// Boost
#include <boost/filesystem.hpp>
// - datatools
#include <datatools/exception.h>
#include <datatools/logger.h>

// This Project
#include <genbb_help/genbb_help_config.h>

namespace {
//! Return the path to the root resource directory
std::string get_resource_root(bool overriden_env) {
#if GENBB_HELP_STANDALONE == 1
  static const boost::filesystem::path resource_path = "resources";
#else
  static const boost::filesystem::path resource_path = "@BUNDLE_RESOURCE_TAG@/genbb_help";
#endif
  static const boost::filesystem::path install_root = "@CMAKE_INSTALL_PREFIX@";
  boost::filesystem::path install_data_root = install_root / "@CMAKE_INSTALL_DATADIR@";
  // Not sure to maintain this in the future:
  if(overriden_env) {
    if (std::getenv("GENBB_HELP_DATA_DIR")) {
      //DT_LOG_WARNING(datatools::logger::PRIO_WARNING,
      //               "Using GENBB_HELP_DATA_DIR overriding environ variable...");
      install_data_root = std::string(std::getenv("GENBB_HELP_DATA_DIR"));
    }
  }
  boost::filesystem::path install_resource_root = install_data_root / resource_path;
  return install_resource_root.string();
}
} // namespace

namespace genbb {

std::string get_resource_dir(bool overriden_env) {
  return get_resource_root(overriden_env);
}

std::string get_resource(const std::string& rname, bool overriden_env) {
  DT_THROW_IF(rname[0] == '/', std::logic_error, "invalid resource name");

  std::string fullpath(get_resource_root(overriden_env) + "/" + rname);
  std::ifstream check(fullpath.c_str());
  DT_THROW_IF(!check.good(),
              std::runtime_error,
              "Unreadable resource '" << fullpath << "'")
  return fullpath;
}
} // namespace genbb

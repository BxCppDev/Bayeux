#!/bin/bash
# -*- mode: shell-script; -*-
# mygsl-config
#
# Note:
# This is a default config script provided by
# the mkskelpack program (from the PkgTools package).
# It suits the use of some default GNU/makefile
# generated in the package 'gmk' directory.
#
# Feel free to modify this file if you use another system
# to build/install this package (i.e. Autotools).
#
help=0

SCRIPTNAME="mygsl-config"
THE_SYSTEM="$(uname -s)-$(uname -m | sed -e 's/ //g')"

THEPACK_ROOT=/usr/local
if [ -n "${MYGSL_ROOT}" ]; then
    THEPACK_ROOT="${MYGSL_ROOT}" 
else 
    echo "$SCRIPTNAME: error: 'MYGSL_ROOT' environment variable is not defined!" 
    exit 1
fi

THEPACK_INCLUDEDIR="$THEPACK_ROOT/include" 

THEPACK_LIBDIR="$THEPACK_ROOT/${THE_SYSTEM}/lib" 

THEPACK_BINDIR="$THEPACK_ROOT/${THE_SYSTEM}/bin" 

THEPACK_VERSION=0.1.0
if [ -f "$THEPACK_ROOT/VERSION" ]; then
    THEPACK_VERSION="$(cat $THEPACK_ROOT/VERSION)"    
elif [ -f "$THEPACK_ROOT/pkgtools.d/package.info"  ]; then
    version=$(cat $THEPACK_ROOT/pkgtools.d/package.info | grep "version=" | cut -d'=' -f2 )    
    THEPACK_VERSION=$version
fi

opt=$1

if [ "x$opt" = "x" ]; then
    echo "$SCRIPTNAME: error: Missing option!" 
    help=1
fi

if [ "x$opt" = "x--help" -o "x$opt" = "x-h" -o "x$opt" = "x-?" ]; then
    help=1
fi

if [ $help -eq 1 ]; then
    cat<<EOF
Usage: $SCRIPTNAME [OPTION]

Known values for OPTION are:

  --prefix              show mygsl installation prefix
  --incdir              print include directory
  --libdir              print library directory
  --bindir              print binary directory
  --include             print include path pre-processor flags without dependencies 
  --cflags              print include path pre-processor flags with dependencies
  --libs                print library linking information, without dependencies
  --gsl-ldpath          print the path to GSL libraries             
  --gsl-incpath         print the path to GSL headers             
  --ldflags             
  --libs-depends        print library linking information, with dependencies
  --help                print this help then exit
  --version             print version information
  --system              print system
  --test                print test info

EOF
    exit 1
fi 

gsl_config_def=$(which gsl-config)
gsl_version_def=$(${gsl_config_def} --version)
gsl_prefix_def=$(${gsl_config_def} --prefix)

if [ "x${GSL_BASE_DIR}" != "x" ]; then
    if [ ! -d "${GSL_BASE_DIR}" ]; then
	echo "$SCRIPTNAME: error: GSL_BASE_DIR='${GSL_BASE_DIR}' is not a valid directory! Abort!" 1>&2
	exit 1
    fi
    gsl_config=$(find ${GSL_BASE_DIR}/bin -mindepth 1 -maxdepth 1 -name "gsl-config")
    gsl_version=$(${gsl_config} --version)
    gsl_prefix=$(${gsl_config} --prefix)
else
    gsl_config=${gsl_config_def}
    gsl_version=${gsl_version_def}
    gsl_prefix=${gsl_prefix_def}
fi

gsl_major=$(echo ${gsl_version} | cut -d'.' -f1)
gsl_minor=$(echo ${gsl_version} | cut -d'.' -f2)
if [ ${gsl_major} -lt 1 ]; then
    echo "$SCRIPTNAME: error: GSL version ${gsl_version} is not suitable! Abort!" 1>&2
    exit 1
elif [ ${gsl_major} -eq 1 -a ${gsl_minor} -lt 10 ]; then
	echo "$SCRIPTNAME: error: GSL version ${gsl_version} is not suitable! Abort!" 1>&2
	exit 1
fi

if [ "x$opt" = "x--test" ]; then
    if [ "x${GSL_BASE_DIR}" != "x" ]; then
	echo "$SCRIPTNAME: warning: a special GSL installation is forced using the GSL_BASE_DIR='${GSL_BASE_DIR}'!" 1>&2
    fi
cat <<EOF
mygsl-config tests:
  Default system GSL prefix is:  ${gsl_prefix_def}
  Default system GSL version is: ${gsl_version_def}
  Default system GSL config is:  ${gsl_config_def}
EOF
echo -n "  Current GSL base directory is: ${gsl_prefix}" 
if [ "x${GSL_BASE_DIR}" != "x" ]; then
cat <<EOF
 (from the GSL_BASE_DIR environment variable)
EOF
else
cat <<EOF
 (corresponds to the system\'s default version)
EOF
fi

cat <<EOF
  Current GSL version is:        ${gsl_version}
  Current GSL config is:         ${gsl_config}
  Current PATH is:               ${PATH}
  Current LD_LIBRARY_PATH is:    ${LD_LIBRARY_PATH}
EOF
    exit 0
fi 

if [ "x$opt" = "x--system" ]; then
    echo "${THE_SYSTEM}"
    exit 0
fi 

if [ "x$opt" = "x--prefix" ]; then
    echo "${THEPACK_ROOT}"
    exit 0
fi 

if [ "x$opt" = "x--version" ]; then
    echo "${THEPACK_VERSION}"
    exit 0
fi 

if [ "x$opt" = "x--incdir" ]; then
    echo "${THEPACK_INCLUDEDIR}" 
    exit 0
fi

if [ "x$opt" = "x--include" ]; then
    echo "-I${THEPACK_INCLUDEDIR} " 
    exit 0
fi

if [ "x$opt" = "x--cflags" ]; then
    echo -n "-I${THEPACK_INCLUDEDIR} "  \
         "`gsl-config --cflags` " 
    exit 0
fi

if [ "x$opt" = "x--libdir" ]; then
    echo "${THEPACK_LIBDIR}"
    exit 0
fi 

if [ "x$opt" = "x--gsl-incpath" ]; then
    gsl_inc_path=$(gsl-config --cflags | tr -s ' ' | tr ' ' '\n' | grep "\-I")
    echo "${gsl_inc_path}"
    exit 0
fi

if [ "x$opt" = "x--gsl-ldpath" ]; then
    gsl_ld_path=$(gsl-config --libs | tr -s ' ' | tr ' ' '\n' | grep "\-L")
    echo "${gsl_ld_path}"
    exit 0
fi

if [ "x$opt" = "x--bindir" ]; then
    echo "${THEPACK_BINDIR}"
    exit 0
fi 

if [ "x$opt" = "x--libs" ]; then
    echo "-L${THEPACK_LIBDIR} -lmygsl "
    exit 0
fi 

if [ "x$opt" = "x--libs-depends" -o "x$opt" = "x--ldflags" ]; then
  echo -n "-fPIC -L${THEPACK_LIBDIR} -lmygsl "  \
         "`gsl-config --libs` " \
         " -lm"
    echo

    ################################################################
    # Please add here some stuff in order to take into account
    # external package dependencies; it may looks like:
    # echo "-L${THEPACK_LIBDIR} -lmygsl " \
    #      "`XXX-config --libs` " 
    # where XXX stands for the identifier of the external package 
    ################################################################
    exit 0
fi 

echo "$SCRIPTNAME: error: Unknown option '${opt}'!" 
$0 --help
exit 1

# end of mygsl-config

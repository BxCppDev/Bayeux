# Findmygsl.cmake
# 
# A rather brute force version.
# 
# Locate mygsl library
# This module defines
#  mygsl_FOUND
#  mygsl_VERSION
#  mygsl_LIBRARIES
#  mygsl_INCLUDE_DIRS, where to find mygsl/mygsl_config.h
#  mygsl_LIBRARIES_DEPEND
#  mygsl_INCLUDE_DIRS_DEPEND
# and 
#  mygsl_WITH_BIO if Boost I/O support is activated
#  mygsl_WITH_PYTHON_WRAPPER if Boost Python wrapper support is activated

set ( __bio_support 1 )
set ( __python_wrapper_support 0 )

set ( mygsl_VERSION  @mygsl_VERSION_STR@ CACHE STRING "mygsl version" )

if ( __python_wrapper_support )
   set ( mygsl_WITH_PYTHON_WRAPPER  @mygsl_WITH_PYTHON_WRAPPER@ CACHE STRING "Python wrapper flag" )
endif ()

if ( __bio_support )
  set ( mygsl_WITH_BIO             @mygsl_WITH_BIO@  "Boost I/O DLL flag" )
endif ()

message ( STATUS "FindMygsl: mygsl_VERSION='${mygsl_VERSION}'" )

if ( __bio_support )
  message ( STATUS "FindMygsl: mygsl_WITH_BIO='${mygsl_WITH_BIO}'" )
endif ()

if ( __python_wrapper_support )
  message ( STATUS "FindMygsl: mygsl_WITH_PYTHON_WRAPPER='${mygsl_WITH_PYTHON_WRAPPER}'" )
endif ()

find_path ( mygsl_INCLUDE_DIRS mygsl/mygsl_config.h
  HINTS
  $ENV{mygsl_ROOT_DIR}
  PATH_SUFFIXES include
  PATHS
  [HKEY_LOCAL_MACHINE\\SOFTWARE\\mygsl]
  ~/Library/Frameworks
  /Library/Frameworks
  /usr/local
  /usr
  /sw # Fink
  /opt/local # DarwinPorts
  /opt/csw # Blastwave
  /opt
)

message ( STATUS "FindMygsl: mygsl_INCLUDE_DIRS='${mygsl_INCLUDE_DIRS}'" )

find_library ( _mygsl_library 
  NAMES mygsl
  HINTS $ENV{mygsl_ROOT_DIR}
  PATHS
  [HKEY_LOCAL_MACHINE\\SOFTWARE\\mygsl]
  ~/Library/Frameworks
  /Library/Frameworks
  /usr/local
  /usr
  /sw
  /opt/local
  /opt/csw
  /opt
  PATH_SUFFIXES lib64 lib
)
message ( STATUS "FindMygsl: mygsl_LIBRARY='${mygsl_LIBRARY}'" )
set ( _mygsl_libraries "${_mygsl_library}" )

if ( __bio_support )
  if ( ${mygsl_WITH_BIO} )
    find_library ( _mygsl_bio_library 
      NAMES mygsl_bio
      HINTS $ENV{mygsl_ROOT_DIR}
      PATHS
      [HKEY_LOCAL_MACHINE\\SOFTWARE\\mygsl]
      ~/Library/Frameworks
      /Library/Frameworks
      /usr/local
      /usr
      /sw
      /opt/local
      /opt/csw
      /opt
      PATH_SUFFIXES lib64 lib
      )
     message ( STATUS "FindMygsl: _mygsl_bio_library='${_mygsl_bio_library}'" )
     if ( NOT "${_mygsl_bio_library}" STREQUAL "" )
       set ( _mygsl_libraries "${_mygsl_bio_library}" "${_mygsl_library}" )
       message ( STATUS "FindMygsl: _mygsl_libraries='${_mygsl_libraries}'" )
    endif ()
  endif ()
endif ()

set ( mygsl_LIBRARIES ${_mygsl_libraries} )
message ( STATUS "FindMygsl: mygsl_LIBRARIES='${mygsl_LIBRARIES}'" )

include ( FindPackageHandleStandardArgs )
# handle the QUIETLY and REQUIRED arguments and set mygsl_FOUND to TRUE if 
# all listed variables are TRUE
find_package_handle_standard_args ( mygsl DEFAULT_MSG mygsl_LIBRARIES mygsl_INCLUDE_DIRS )

set ( _mygsl_libraries_depend "" )

### if ( _depends_on_Yyy)
###   set ( _mygsl_libraries_depend "${_mygsl_libraries_depend}" @Yyy_LIBRARIES@ )
### endif ()

if ( _depends_on_datatools)
  set ( _mygsl_libraries_depend "${_mygsl_libraries_depend}" @datatools_LIBRARIES@ )
endif ()

set ( mygsl_LIBRARIES 
      ${mygsl_LIBRARIES}
      ${_mygsl_libraries_depend}
    )

message ( STATUS "FindMygsl: mygsl_LIBRARIES_DEPEND='${mygsl_LIBRARIES_DEPEND}'" )

if (mygsl_WITH_PYTHON_WRAPPER)
   list ( APPEND mygsl_LIBRARIES 
          python )
 endif ()

set ( _mygsl_include_dirs_depend "" )

### if ( _depends_on_Yyy)
###   set ( _mygsl_include_dirs_depend "${_mygsl_include_dirs_depend}" @Yyy_INCLUDE_DIRS@ )
### endif ()

if ( _depends_on_datatools)
  set ( _mygsl_include_dirs_depend "${_mygsl_include_dirs_depend}" @datatools_INCLUDE_DIRS@ )
endif ()

set ( mygsl_INCLUDE_DIRS
      ${mygsl_INCLUDE_DIRS}
      ${_mygsl_include_dirs_depend}
    )

message ( STATUS "FindMygsl: mygsl_INCLUDE_DIRS_DEPEND='${mygsl_INCLUDE_DIRS_DEPEND}'" )

set ( mygsl_DEFINITIONS "")

mark_as_advanced ( mygsl_VERSION  
		   mygsl_INCLUDE_DIRS 
                   mygsl_LIBRARIES
		   mygsl_DEFINITIONS
                 )

if ( __bio_support )
  mark_as_advanced ( mygsl_WITH_BIO )  
endif ()

if ( __python_wrapper_support )
  mark_as_advanced ( mygsl_WITH_PYTHON_WRAPPER )  
endif ()

message ( STATUS "Findmygsl: mygsl_FOUND=${mygsl_FOUND}")

# end of Findmygsl.cmake


# FindMygsl.cmake
# 
# A rather brute force version.
# 
# Locate mygsl library
# This module defines
#  MYGSL_FOUND
#  MYGSL_VERSION
#  MYGSL_LIBRARIES
#  MYGSL_INCLUDE_DIRS, where to find mygsl/mygsl_config.h
#  MYGSL_LIBRARIES_DEPEND
#  MYGSL_INCLUDE_DIRS_DEPEND
# and 
#  MYGSL_WITH_BIO if Boost I/O support is activated
#  MYGSL_WITH_PYTHON_WRAPPER if Boost Python wrapper support is activated

set ( __bio_support 0 )
set ( __python_wrapper_support 0 )

set ( MYGSL_VERSION  @mygsl_VERSION_STR@ CACHE STRING "mygsl version" )

if ( __python_wrapper_support )
   set ( MYGSL_WITH_PYTHON_WRAPPER  @MYGSL_WITH_PYTHON_WRAPPER@ CACHE STRING "Python wrapper flag" )
endif ()

if ( __bio_support )
  set ( MYGSL_WITH_BIO             @MYGSL_WITH_BIO@  "Boost I/O DLL flag" )
endif ()

message ( STATUS "FindMygsl: MYGSL_VERSION='${MYGSL_VERSION}'" )

if ( __bio_support )
  message ( STATUS "FindMygsl: MYGSL_WITH_BIO='${MYGSL_WITH_BIO}'" )
endif ()

if ( __python_wrapper_support )
  message ( STATUS "FindMygsl: MYGSL_WITH_PYTHON_WRAPPER='${MYGSL_WITH_PYTHON_WRAPPER}'" )
endif ()

find_path ( MYGSL_INCLUDE_DIRS mygsl/mygsl_config.h
  HINTS
  $ENV{MYGSL_ROOT_DIR}
  PATH_SUFFIXES include
  PATHS
  [HKEY_LOCAL_MACHINE\\SOFTWARE\\mygsl]
  ~/Library/Frameworks
  /Library/Frameworks
  /usr/local
  /usr
  /sw # Fink
  /opt/local # DarwinPorts
  /opt/csw # Blastwave
  /opt
)

message ( STATUS "FindMygsl: MYGSL_INCLUDE_DIRS='${MYGSL_INCLUDE_DIRS}'" )

find_library ( _mygsl_library 
  NAMES mygsl
  HINTS $ENV{MYGSL_ROOT_DIR}
  PATHS
  [HKEY_LOCAL_MACHINE\\SOFTWARE\\mygsl]
  ~/Library/Frameworks
  /Library/Frameworks
  /usr/local
  /usr
  /sw
  /opt/local
  /opt/csw
  /opt
  PATH_SUFFIXES lib64 lib
)
message ( STATUS "FindMygsl: MYGSL_LIBRARY='${MYGSL_LIBRARY}'" )
set ( _mygsl_libraries "${_mygsl_library}" )

if ( __bio_support )
  if ( ${MYGSL_WITH_BIO} )
    find_library ( _mygsl_bio_library 
      NAMES mygsl_bio
      HINTS $ENV{MYGSL_ROOT_DIR}
      PATHS
      [HKEY_LOCAL_MACHINE\\SOFTWARE\\mygsl]
      ~/Library/Frameworks
      /Library/Frameworks
      /usr/local
      /usr
      /sw
      /opt/local
      /opt/csw
      /opt
      PATH_SUFFIXES lib64 lib
      )
     message ( STATUS "FindMygsl: _mygsl_bio_library='${_mygsl_bio_library}'" )
     if ( NOT "${_mygsl_bio_library}" STREQUAL "" )
       set ( _mygsl_libraries "${_mygsl_bio_library}" "${_mygsl_library}" )
       message ( STATUS "FindMygsl: _mygsl_libraries='${_mygsl_libraries}'" )
    endif ()
  endif ()
endif ()

set ( MYGSL_LIBRARIES ${_mygsl_libraries} )
message ( STATUS "FindMygsl: MYGSL_LIBRARIES='${MYGSL_LIBRARIES}'" )

include ( FindPackageHandleStandardArgs )
# handle the QUIETLY and REQUIRED arguments and set MYGSL_FOUND to TRUE if 
# all listed variables are TRUE
find_package_handle_standard_args ( mygsl DEFAULT_MSG MYGSL_LIBRARIES MYGSL_INCLUDE_DIRS )

set ( MYGSL_LIBRARIES_DEPEND 
      ${MYGSL_LIBRARIES}
      ###@MYGSL_LIBRARIES_DEPEND@ 
      ###@DATATOOLS_LIBRARIES_DEPEND@
    )

message ( STATUS "FindMygsl: MYGSL_LIBRARIES_DEPEND='${MYGSL_LIBRARIES_DEPEND}'" )

# if (MYGSL_WITH_PYTHON_WRAPPER)
#   list ( APPEND MYGSL_LIBRARIES_DEPEND 
#          python )
# endif ()

set ( MYGSL_INCLUDE_DIRS_DEPEND
      ${MYGSL_INCLUDE_DIRS}
      ###@MYGSL_INCLUDE_DIR_DEPEND@
      ###@DATATOOLS_INCLUDE_DIRS_DEPEND@
    )

message ( STATUS "FindMygsl: MYGSL_INCLUDE_DIRS_DEPEND='${MYGSL_INCLUDE_DIRS_DEPEND}'" )

mark_as_advanced (MYGSL_VERSION  
                  MYGSL_LIBRARY
		  MYGSL_INCLUDE_DIRS 
                  MYGSL_LIBRARIES 
		  MYGSL_INCLUDE_DIRS_DEPEND 
                  MYGSL_LIBRARIES_DEPEND 
		  )

if ( __bio_support )
  mark_as_advanced ( MYGSL_WITH_BIO )  
endif ()

if ( __python_wrapper_support )
  mark_as_advanced ( MYGSL_WITH_PYTHON_WRAPPER )  
endif ()

message ( STATUS "FindMygsl: MYGSL_FOUND=${MYGSL_FOUND}")

# end of FindMygsl.cmake


#!/usr/bin/env bash
# -*- mode: shell-script; -*-
# mygsl-config
#

script_name="mygsl-config"

opwd=$(pwd)
help=0
debug=0
devel=0
#bio_support=1
#python_wrapper_support=0
bio_support=@MYGSL_WITH_BIO_SUPPORT@
python_wrapper_support=@MYGSL_WITH_PYTHON_WRAPPER_SUPPORT@

with_debug=0
if [ "x@MYGSL_WITH_DEBUG@" == "x1" -o "x@MYGSL_WITH_DEBUG@" == "xON" ]; then
    with_debug=1
fi

if [ ${python_wrapper_support} -eq 1 ]; then
    with_python_wrapper=0
    if [ "x@MYGSL_WITH_PYTHON_WRAPPER@" == "x1" -o "x@MYGSL_WITH_PYTHON_WRAPPER@" == "xON" ]; then
	with_python_wrapper=1
    fi
fi

with_bio=0
if [ ${bio_support} -eq 1 ]; then
    if [ "x@MYGSL_WITH_BIO@" == "x1" -o "x@MYGSL_WITH_BIO@" == "xON" ]; then
	with_bio=1
    fi
fi

with_automated_dependecies=0
if [ "x@AUTOMATIC_CMAKE_DEPENDENCIES@" == "x1" -o "x@AUTOMATIC_CMAKE_DEPENDENCIES@" == "xON" ]; then
    with_automated_dependecies=1
fi

if [ ${with_automated_dependecies} -eq 1 ]; then
    list_of_third_party_dependencies_infos=$(echo "@_mygsl_list_of_third_party_dependencies_infos@" | tr -d [[:space:]] | tr ';' ' ')
    list_of_dependencies_infos=$(echo "@_mygsl_list_of_dependencies_infos@" | tr -d [[:space:]] | tr ';' ' ')
    full_list_of_dependencies_infos=
    if [ "x${list_of_dependencies_infos}" != "x" ]; then
	full_list_of_dependencies_infos="${full_list_of_dependencies_infos}${list_of_dependencies_infos} "
    fi
    if [ "x${list_of_third_party_dependencies_infos}" != "x" ]; then
	full_list_of_dependencies_infos="${full_list_of_dependencies_infos}${list_of_third_party_dependencies_infos}"
    fi
fi

function my_exit ()
{
    cd ${opwd}
    exit $1
}

mygsl_system="@CMAKE_SYSTEM_NAME@-@CMAKE_SYSTEM_PROCESSOR@"

mygsl_root="@CMAKE_INSTALL_PREFIX@"

mygsl_include_dir="@CMAKE_INSTALL_FULL_INCLUDEDIR@"

mygsl_lib_dir="@CMAKE_INSTALL_FULL_LIBDIR@"

mygsl_bin_dir="@CMAKE_INSTALL_FULL_BINDIR@"

mygsl_data_dir="@CMAKE_INSTALL_FULL_DATADIR@"

mygsl_etc_dir="@CMAKE_INSTALL_FULL_ETCDIR@"

mygsl_doc_dir="@CMAKE_INSTALL_FULL_DOCDIR@"

mygsl_cmake_config_dir="@CMAKE_INSTALL_PREFIX@/@mygsl_cmake_config_install_dir@"

mygsl_version=@mygsl_VERSION_STR@

option="$1"
shift 1

if [ "x${option}" = "x" ]; then
    echo "ERROR: ${script_name}: Missing option ! Abort !" 1>&2
    help=1
fi

if [ "x${option}" = "x--help" -o "x${option}" = "x-h" -o "x${option}" = "x-?" ]; then
    help=1
fi

function print_help ()
{
    cat<<EOF
Usage: ${script_name} [OPTIONS]

Known values for OPTION are:

  --help                print this help then exit
  --version             print version information
  --system              print system
  --prefix              print mygsl installation prefix
  --incdir              print include directory
  --libdir              print library directory
  --bindir              print binary directory
  --datadir             print data/resources base directory
  --docdir              print documentation base directory
  --etcdir              print configuration base directory
  --include             print include path pre-processor flags without dependencies
  --cflags              print include path pre-processor flags with dependencies
EOF
    cat<<EOF
  --libs     [option]   print library linking information, without dependencies
  --ldflags  [option]   print library linking information, with dependencies
EOF
    if [ ${bio_support} -eq 1 ]; then
	cat<<EOF
    Options: 
        --with-bio      with linkage against the libmygsl_bio.so DLL (default)
        --without-bio   without linkage against the libmygsl_bio.so DLL
EOF
    fi
    if [ ${bio_support} -eq 1 ]; then
	cat<<EOF
  --with-bio            print if Boost/Serialization binary code is pre-built 
                        in an auxiliary I/O shared library
EOF
    fi
    if [ ${python_wrapper_support} -eq 1 ]; then
	cat<<EOF
  --with-python-wrapper print if Python wrapper module is used
EOF
    fi
    cat<<EOF
  --with-debug          print if mygsl has been compiled in 'debug' mode
  --cmake-config-dir    print the installation directory for the 'mygsl-config.cmake' file
EOF
    if [ ${with_automated_dependecies} -eq 1 ]; then
	cat<<EOF
  --list-of-dependencies print the list of known auto-resolved dependencies
EOF
    fi
    return 0
}

if [ ${help} -eq 1 ]; then
    print_help
    my_exit 1
fi

if [ "x${option}" = "x--system" ]; then
    echo "${mygsl_system}"
    my_exit 0
fi

if [ "x${option}" = "x--prefix" ]; then
    echo "${mygsl_root}"
    my_exit 0
fi

if [ "x${option}" = "x--version" ]; then
    echo "${mygsl_version}"
    my_exit 0
fi

if [ "x${option}" = "x--cmake-config-dir" ]; then
    echo "${mygsl_cmake_config_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--include-dir" -o "x${option}" = "x--incdir" ]; then
    echo "${mygsl_include_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--datadir" ]; then
    echo "${mygsl_data_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--etcdir" ]; then
    echo "${mygsl_etc_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--docdir" ]; then
    echo "${mygsl_doc_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--resources-dir" ]; then
    echo "${mygsl_resources_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--include" ]; then
    echo "-I${mygsl_include_dir} "
    my_exit 0
fi

if [ ${with_automated_dependecies} -eq 1 ]; then
    if [ "x${option}" = "x--list-of-dependencies" ]; then
	echo "${full_list_of_dependencies_infos}"
	my_exit 0
    fi
fi

if [ "x${option}" = "x--cflags" ]; then
    (
	echo -n "-fPIC " 
	echo -n "-I${mygsl_include_dir} "
        #
        # Automated dependencies (experimental)
        #
	if [ ${with_automated_dependecies} -eq 1 ]; then  
	    for dependency_info in ${full_list_of_dependencies_infos}; do
		if [ ${devel} -gt 0 ]; then
		    echo "DEVEL: ${script_name}: Processing automatic dependency info '${dependency_info}' script !" 1>&2
		fi
		dependency_name=$(echo ${dependency_info} | cut -d':' -f1)
		dependency_version=$(echo ${dependency_info} | cut -d':' -f2)
		dependency_name_lower=$(echo ${dependency_name} | tr "A-Z" "a-z" )
		dependency_name_upper=$(echo ${dependency_name} | tr "a-z" "A-Z" )
		dependency_no_config_script_ENVNAME="${dependency_name_upper}_NO_CONFIG_SCRIPT"
		if [ "x${!dependency_no_config_script_ENVNAME}" = "x1" ]; then
		    continue
		fi
		dependency_config_script="${dependency_name_lower}-config"
		dependency_config_script_ENVNAME="${dependency_name_upper}_CONFIG_SCRIPT"
		if [ "x${!dependency_config_script_ENVNAME}" != "x" ]; then
		    dependency_config_script="${!dependency_config_script_ENVNAME}"
		fi
		which ${dependency_config_script} >/dev/null 2>&1
		if [ $? -eq 0 ]; then
		    cflags_switch="--cflags"
		    dependency_config_script_cflags_switch_ENVNAME="${dependency_name_upper}_CONFIG_SCRIPT_DEFAULT_CFLAGS_SWITCH"
		    if [ "x${!dependency_config_script_cflags_switch_ENVNAME}" != "x" ]; then
			###echo "DEVEL: ${script_name}: dependency_config_script_cflags_switch == '${!dependency_config_script_cflags_switch_ENVNAME}' !" 1>&2
			cflags_switch="${!dependency_config_script_cflags_switch}"
		    fi
		    if [ "x${cflags_switch}" != "x" ]; then
			dependency_cflags=$(${dependency_config_script} ${cflags_switch} | tr '\n' ' ')
			if [ $? -ne 0 ]; then
			    dependency_cflags=
			    echo "ERROR: ${script_name}: No support for the '${cflags_switch}' switch from the '${dependency_config_script}' script !" 1>&2
			    my_exit 1
			fi
			echo -n "${dependency_cflags} "
		    fi
		else 
		    echo "ERROR: ${script_name}: No support for a '${dependency_config_script}' script !" 1>&2
		    echo "ERROR: ${script_name}: You may consider to fix the 'mygsl-config.in' template script manually !" 1>&2
		    my_exit 1
		fi
	    done
	fi
        #
        # Here one can add more dependency material
        #
	echo ""
    ) | python ${mygsl_data_dir}/pkgtools/mkuniqueflags.py     
    my_exit 0
fi

if [ "x${option}" = "x--libdir" ]; then
    echo "${mygsl_lib_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--bindir" ]; then
    echo "${mygsl_bin_dir}"
    my_exit 0
fi


# compute default linkage :
bio_ldflags=
if [ ${with_bio} -eq 1 ]; then
    bio_ldflags=${mygsl_lib_dir}/libmygsl_bio@CMAKE_SHARED_LIBRARY_SUFFIX@
fi

if [ "x${option}" = "x--libs" -o "x${option}" = "x--ldflags" ]; then
    while [ -n "$1" ]; do
	lib_option="$1"
	if [ "x${lib_option}" = "x--without-bio" ]; then
	    bio_ldflags=
	elif [ "x${lib_option}" = "x--with-bio" -a ${with_bio} -eq 1 ]; then
	    bio_ldflags=${mygsl_lib_dir}/libmygsl_bio@CMAKE_SHARED_LIBRARY_SUFFIX@
	fi
	shift 1
    done
fi

if [ "x${option}" = "x--libs" ]; then
    echo -n "${bio_ldflags} "
    echo -n "${mygsl_lib_dir}/libmygsl@CMAKE_SHARED_LIBRARY_SUFFIX@ "
    echo
    my_exit 0
fi

if [ "x${option}" = "x--ldflags" ]; then
    (
	echo -n "${bio_ldflags} "
	echo -n "${mygsl_lib_dir}/libmygsl@CMAKE_SHARED_LIBRARY_SUFFIX@ "
        #
        # Automated dependencies (experimental)
        #
	if [ ${with_automated_dependecies} -eq 1 ]; then  
	    for dependency_info in ${full_list_of_dependencies_infos}; do
		if [ ${devel} -gt 0 ]; then
		    echo "DEVEL: ${script_name}: Processing automatic dependency info '${dependency_info}' script !" 1>&2
		fi
		dependency_name=$(echo ${dependency_info} | cut -d':' -f1)
		dependency_version=$(echo ${dependency_info} | cut -d':' -f2)
		dependency_name_lower=$(echo ${dependency_name} | tr "A-Z" "a-z" )
		dependency_name_upper=$(echo ${dependency_name} | tr "a-z" "A-Z" )
		dependency_no_config_script_ENVNAME="${dependency_name_upper}_NO_CONFIG_SCRIPT"
		if [ "x${!dependency_no_config_script_ENVNAME}" = "x1" ]; then
		    continue
		fi
		dependency_config_script="${dependency_name_lower}-config"
		dependency_config_script_ENVNAME="${dependency_name_upper}_CONFIG_SCRIPT"
		if [ "x${!dependency_config_script_ENVNAME}" != "x" ]; then
		    dependency_config_script="${!dependency_config_script_ENVNAME}"
		fi
		which ${dependency_config_script} >/dev/null 2>&1
		if [ $? -eq 0 ]; then
		    ldflags_switch="--ldflags"
		    dependency_config_script_ldflags_switch_ENVNAME="${dependency_name_upper}_CONFIG_SCRIPT_DEFAULT_LDFLAGS_SWITCH"
		    if [ "x${!dependency_config_script_ldflags_switch_ENVNAME}" != "x" ]; then
			ldflags_switch="${!dependency_config_script_ldflags_switch_ENVNAME}"
			###echo "DEVEL: ${script_name}: dependency_config_script_ldflags_switch == '${dependency_config_script_ldflags_switch_ENVNAME}' !" 1>&2
		    fi
		    if [ "x${ldflags_switch}" != "x" ]; then
			dependency_ldflags=$(${dependency_config_script} ${ldflags_switch} | tr '\n' ' ')
			if [ $? -ne 0 ]; then
			    dependency_ldflags=
			    echo "ERROR: ${script_name}: No support for the '${ldflags_switch}' switch from the '${dependency_config_script}' script !" 1>&2
			    my_exit 1
			fi
			echo -n "${dependency_ldflags} "
		    fi
		else
		    echo "WARNING: ${script_name}: No support for a '${dependency_config_script}' script !" 1>&2
		    echo "WARNING: ${script_name}: You may consider to fix the 'mygsl-config.in' template script manually !" 1>&2
		fi
	    done
	fi
        #
        # here one can add more dependency material
        #
	echo ""
    ) | python ${mygsl_data_dir}/pkgtools/mkuniqueflags.py -r   
    my_exit 0
fi

if [ "x${option}" = "x--with-debug" ]; then
    echo "${with_debug}"
    if [ ${with_debug} -eq 1 ]; then
	my_exit 0
    else
	my_exit 1	
    fi
fi

if [ ${bio_support} -eq 1 ]; then
    if [ "x${option}" = "x--with-bio" ]; then
	echo "${with_bio}"
	if [ ${with_bio} -eq 1 ]; then
	    my_exit 0
	else
	    my_exit 1	
	fi
    fi
fi

if [ ${python_wrapper_support} -eq 1 ]; then
    if [ "x${option}" = "x--with-python-wrapper" ]; then
	echo "${with_python_wrapper}"
	if [ ${with_python_wrapper} -eq 1 ]; then
	    my_exit 0
	else
	    my_exit 1	
	fi
    fi
fi

echo "ERROR: ${script_name}: Unknown option !" 1>&2
print_help
my_exit 1

# end of mygsl-config

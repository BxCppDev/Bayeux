=========================
mctools ``examples/ex01``
=========================

Introduction
============

 * Description:

   This  example illustrates  how to  use the mctools Geant4 engine to simulate
   radioactive decays from a given location in a virtual geometry and track the
   Monte-Carlo particles.

   It is first shown how to use the ``geomtools_check_setup`` utility
   to visualize the setup and generate a GDML file usable by Geant4
   and browsable by ROOT.

   The event and vertex generators are also tested in a standalone mode
   thanks to the ``genbb_inspector`` and ``genvtx_production`` programs
   respectively.

   The ``g4_production`` program is used to run a Geant4 based
   Monte-Carlo simulation and produce an output simulated data file.

   Finally the ``dpp_processing`` program is used to run the Geant4 simulation
   through a data processing pipeline, using the dedicated data processing
   module class ``mctools::g4::simulation_module``.

 * Source files :

   * ``ex01_read_plain_simdata.cxx`` : the program to browse plain simulated data
     archive files as generated by the ``g4_production`` program.

 * Configuration files :

   * Geometry :

     * ``config/manager.conf`` : the main configuration file of the geometry
       manager.
     * Geometry models files:

       * ``config/world.geom`` : the geometry model that represents
         the top volume (*world*).
       * ``config/lab.geom`` : the geometry model that represents the
         experimental area where the setup is installed.
       * ``config/vessel.geom`` : the geometry models that represent the
         vacuum chamber wherin the detectors and calibration sources are
         installed.
       * ``config/optical_module.geom``: the geometry models that represent
         the detection module.
       * ``config/shielding.geom`` : the geometry models that represent
         passive shielding walls on both side of the vessel.
       * ``config/source.geom`` : the geometry models that represent
         the calibration source.
       * ``config/pmt_hamamatsu_R5912MOD_polycone.data`` : the dimensions
         and shape of the photomultiplier tube used by the optical module.

     * ``config/categories.lis`` : the file that defines the
       list of *geometry categories* used to assign *geometry IDs* to the
       volumes in the hierarchy.
     * Geometry plugins:

       * ``config/materials_plugin.conf`` : the file that defines the
         *materials* plugin. At least one material plugin must be provided
         to export the geometry hierarchy in a GDML file.
       * ``config/mapping_plugins.conf`` : the file that defines some
         *geometry ID mapping* plugins. Mapping plugins are optional.
         A default *mapping* object is built from the rules exposed in the
         ``config/categories.lis`` file. Additionnal (and specialized)
         *mapping* objects may be optionaly provided within plugins.

   * Event generation:

     * ``config/event_generator/manager.conf`` : The main configuration file for the event
       generator manager (``genbb::manager`` class).
     * ``config/event_generator/backgrounds.conf`` : The definitions of some event generators.
     * ``config/event_generator/calibrations.conf`` : The definitions of some event generators.
     * ``config/event_generator/dbd.conf`` : The definitions of some event generators.
     * ``config/event_generator/misc.conf`` : The definitions of some event generators.

   * Vertex generation:

     * ``config/vertex_generator/manager.conf`` : The main configuration file for the vertex
       generator manager (``gencvtx::manager`` class).
     * ``config/vertex_generator/vertex_generators.conf`` :  The definitions of some vertex generators.

   * Geant4 simulation:

     * ``config/manager.conf`` : The main configuration file for the Geant4 simulation engine.
     * ``config/dlls.conf`` : The configuration file for the dynamic library loader.
     * ``config/service_manager.conf`` : The configuration file for the service manager.
     * ``config/services.conf`` : The configuration definitions of some services.
     * ``config/module_manager.conf`` : The configuration file for the module manager.
     * ``config/modules.conf`` : The configuration definitions of some modules.
     * ``config/step_hit_processor_factory.conf`` : The definitions of the *step MC hit processors*
       associated to the sensitive detectors in the geometry.
     * ``config/g4vis.mac`` : A Geant4 visualization macro.

   * Data processing pipeline (``dpp_processing``):

     * ``config/dlls.conf`` : the list of shared libraries to be dynamically loaded.
     * ``config/module_manager.conf`` : the main configuration file of the data processing
       module manager embeded in the ``dpp_processing`` program.
     * ``config/modules.conf`` : the definitions of the *data processing modules* used aloing the pipeline
       (here we use only one *Geant4 based simulation* module).
     * ``config/service_manager.conf`` : the main configuration of the service manager embeded in the
       ``dpp_processing``program.
     * ``config/services.conf`` :  the definitions of the *services* used by the data processing modules.

 * Built object(s) :

     * ``ex01_read_plain_simdata`` : the executable linked against the ``mctools`` library
       and other Boost I/O libraries (``datatools_bio``, ``geomtools_bio`` and ``mctools_bio``).

 * Build method: CMake.


Quick start
===========

1. Build, install and setup the ``mctools`` library.
2. Make a copy of the example directory::

      shell> cp -a [geomtools install base directory]/share/geomtools/examples/ex01 /tmp/ex01
      shell> cd /tmp/ex01

3. Build and install the example program::

      shell> mkdir __build
      shell> cd __build
      shell> cmake \
        -DCMAKE_INSTALL_PREFIX=.. \
        -Dmctools_DIR=$(mctools-config --prefix) \
        ..
      shell> make
      shell> make install
      shell> cd ..

4. Standalone Geometry:

   a. Run the ``geomtools_check_setup`` to check the virtual geometry::

         shell> geomtools_check_setup \
                  --manager-config config/geometry/manager.conf \
                  --with-visu --visu-view-3d \
                  --with-gdml --gdml-to-root-display

      It displays views of the setup using the ``geomtools`` Gnuplot viewer.

      .. image:: images/ex01_geometry_1.jpg
         :width: 200
         :scale: 25 %
         :alt: The 3D view of the setup (file ``images/ex01_geometry_1.jpg``)
         :align: center

      .. image:: images/ex01_geometry_2.jpg
         :width: 200
         :scale: 25 %
         :alt: The 2D view of the setup (file ``images/ex01_geometry_2.jpg``)
         :align: center

   b. ROOT display of the setup via the ``mctools_ex01-1.0.gdml`` GDML file ::

         shell> root
         root [0] TGeoManager * geo = new TGeoManager("geo","mctools examples/ex01 virtual setup");
         root [1] TGeoManager * g2 = geo->Import("mctools_ex01-1.0.gdml");
         root [2] g2->SetVisOption(0);
         root [3] g2->SetVisLevel(100);
         root [4] g2->GetMasterVolume()->Draw("");
         root [5] .q

      It displays a 3D view of the setup using the ROOT visualization tool.

      .. image:: images/ex01_geometry_3.jpg
         :width: 200
         :scale: 25 %
         :alt: The 3D view of the setup from ROOT (file ``images/ex01_geometry_3.jpg``)
         :align: center

5. Standalone event generation:

    a. Show the list of available generators::

         shell> genbb_inspector \
                  --configuration "config/event_generator/manager.conf" \
                  --action "list"

    b. Shoot some primary events from one event generator::

         shell> genbb_inspector \
                  --configuration "config/event_generator/manager.conf" \
                  --action "shoot" \
                  --generator "Co60" \
                  --prng-seed 314159 \
                  --number-of-events 1000 \
                  --output-file "histos_Co60.root"

    c. Display histograms associated to the event kinematics::

         shell> root histos_Co60.root
         root [1] TBrowser b; // then use the GUI to display the histograms
         root [2] .q


6. Standalone vertex generation:

    a. Show the list of available generators::

         shell> genvtx_production \
                 --geometry-manager "config/geometry/manager.conf" \
                 --vertex-generator-manager "config/vertex_generator/manager.conf" \
                 --list


    b. Shoot some random vertex generators and visualize them::

         shell> genvtx_production \
                 --geometry-manager "config/geometry/manager.conf" \
                 --vertex-generator-manager "config/vertex_generator/manager.conf" \
                 --shoot \
                 --number-of-vertices 10000 \
                 --prng-seed 314159 \
                 --vertex-generator "vessel_inner_surface.vg" \
                 --output-file "mctools_ex01_vertices.txt" \
                 --visu --tiny

      It displays views of the setup with the positions of the generated vertexes.

      .. image:: images/ex01_vertex_generator_vessel_inner_surface.jpg
         :width: 200
         :scale: 25 %
         :alt: The generated vertex in the virtual geometry setup (file ``images/ex01_vertex_generator_vessel_inner_surface.jpg``)
         :align: center

7. Geant4 simulation:

    a. Run the simulation through a Geant4 interactive session with visualization::

         shell> g4_production \
                --logging-priority "warning" \
                --number-of-events-modulo 1 \
                --interactive \
                --g4-visu \
                --config "config/manager.conf" \
                --vertex-generator-name "source_0_bulk.vg" \
                --vertex-generator-seed 0 \
                --event-generator-name "Co60" \
                --event-generator-seed 0 \
                --shpf-seed 0 \
                --g4-manager-seed 0 \
                --output-prng-seeds-file "prng_seeds.save" \
                --output-prng-states-file "prng_states.save" \
                --output-data-file "mctools_ex01_Co60_source_0_bulk.xml" \
                --g4-macro "config/g4vis.mac"

      From the Geant4 interactive session::

         Idle> /vis/viewer/set/viewpointThetaPhi -60 45
         Idle> /run/beamOn 10
         Idle> exit

      It displays the virtual geometry setup using the Geant4 visualization driver.

      .. image:: images/ex01_g4_production_0.jpg
         :width: 200
         :scale: 25 %
         :alt: The Geant4 visualization of a ^60^Co decay with two gamma rays emitted from a source film (file ``images/ex01_g4_production_0.jpg``)
         :align: center

      Then browse the output plain simulated data file ::

         shell> ls -l mctools_ex01_Co60_source_0_bulk.xml
         shell> ./ex01_read_plain_simdata \
           --logging-priority "notice" \
           --interactive \
           --input-file "mctools_ex01_Co60_source_0_bulk.xml"

    b. Run the simulation in non-interactive mode ::

         shell> g4_production \
                --logging-priority "warning" \
                --number-of-events 100 \
                --number-of-events-modulo 0 \
                --batch \
                --config "config/manager.conf" \
                --vertex-generator-name "source_0_bulk.vg" \
                --vertex-generator-seed 0 \
                --event-generator-name "Co60" \
                --event-generator-seed 0 \
                --shpf-seed 0 \
                --g4-manager-seed 0 \
                --output-prng-seeds-file "prng_seeds.save" \
                --output-prng-states-file "prng_states.save" \
                --output-data-file "mctools_ex01_Co60_source_0_bulk.data.gz"

       Then browse the output plain simulated data file ::

         shell> ls -l mctools_ex01_Co60_source_0_bulk.data.gz
         shell> ./ex01_read_plain_simdata \
           --logging-priority "notice" \
           --interactive \
           --input-file "mctools_ex01_Co60_source_0_bulk.data.gz"

    c. Run the geant4 simulation through the data processing pipeline::

         !!! NOT TESTED YET !!!

         shell> dpp_processing \
          --logging-priority "debug" \
          --dlls-config "config/dlls.conf" \
          --module-manager-config "config/module_manager.conf" \
          --max-records 100 \
          --modulo 5 \
          --module "Co60@source_0_bulk" \
          --output-file "mctools_ex01_Co60_source_0_bulk.dpp.xml"
         shell> ls -l mctools_ex01_Co60_source_0_bulk.dpp.xml
         shell> less mctools_ex01_Co60_source_0_bulk.dpp.xml
         q

8. Clean::

      shell> rm mctools_ex01-1.0.gdml
      shell> rm mctools_ex01_vertices.txt
      shell> rm geomtools_check_setup.C
      shell> rm histos_Co60.root
      shell> rm prng_seeds.save
      shell> rm prng_seeds.save.~backup~




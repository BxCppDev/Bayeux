=========================
mctools ``examples/ex00``
=========================

Introduction
============

 * Description:

   This  example illustrates  how to  use the Bayeux/mctools Geant4 engine (from the ``Bayeux_mctools_geant4`` library)
   to simulate monokinetic 1 MeV electrons emitted from a source and track them in a virtual geometry.

   It is first shown how to use the ``bxgeomtools_inspector`` utility
   to visualize the setup and generate a GDML file usable by Geant4
   and browsable by ROOT.

   The event and vertex generators are also tested in a standalone mode
   thanks to the ``bxgenbb_inspector`` and ``bxgenvtx_production`` programs
   respectively.

   The ``bxg4_production`` program is used to run a Geant4 based
   Monte-Carlo simulation and produce an output simulated data file both in interactive mode
   with Geant4 visualization and non-interactive mode.

   A sample program is provided to print and display the output simulated data file
   which contains plain object records of the ``mctools::simulated_data`` class.

   Finally the ``bxdpp_processing`` program is used to run the Geant4 simulation
   through a data processing pipeline, using the dedicated data processing
   module class ``mctools::g4::simulation_module``.

 * Source files :

   * ``ex00_inspector.h`` and ``ex00_inspector.cc`` : the simulated data
     inspector class.

   * ``ex00_read_plain_simdata.cxx`` : the program to browse plain simulated data
     archive files as generated by the ``g4_production`` program.

   * ``ex00_read_pipeline_simdata.cxx`` : the program to browse simulated data
     archive files as generated by the ``dpp_processing`` program.

 * Configuration files :

   * Geometry :

     * ``config/geometry/manager.conf`` : the main configuration file of the geometry
       manager.
     * Geometry models files:

       + ``config/geometry/world.geom`` : the geometry model that represents
         the top volume (*world*).
       + ``config/geometry/lab.geom`` : the geometry model that represents the
         experimental area where the setup is installed and additional geometry volumes.
       + ``config/geometry/optical_module.geom``: the geometry models that represent
         the detection module (*sensitive* volume).
       + ``config/geometry/source.geom`` : the geometry models that represent
         the calibration source.

     * ``config/geometry/categories.lis`` : the file that defines the
       list of *geometry categories* used to assign *geometry IDs* to the
       volumes in the hierarchy.
     * Geometry plugins:

       + ``config/geometry/materials_plugin.conf`` : the file that defines the
         *materials* plugin. At least one material plugin must be provided
         to export the geometry hierarchy in a GDML file.
       + ``config/geometry/magnetic_field_plugin.conf`` : the file that defines
         the *electro magnetic fields* plugin. One such plugin is provided, it relies on
         the following files:

         - ``config/geometry/magnetic_field_manager.conf`` : the main configuration file for the electromagnetic field manager.
         - ``config/geometry/magnetic_fields.conf`` : the definitions of the magnetic field modelized in this setup.

   * Event generation:

     * ``config/event_generator/manager.conf`` : The main configuration file for the event
       generator manager (``genbb::manager`` class).
     * ``config/event_generator/guns.conf`` : The definitions of some event generators.
     * ``config/event_generator/electron_spectrum_0.data`` :  Data file
       which contains the tabulated energy spectrum used by an electron generator.

   * Vertex generation:

     * ``config/vertex_generator/manager.conf`` : The main configuration file for the vertex
       generator manager (``genvtx::manager`` class).
     * ``config/vertex_generator/vertex_generators.conf`` :  The definitions of some
       vertex generators.

   * Geant4 simulation:

     * Plain simulation (``bxg4_production``):

       * ``config/simulation/manager.conf`` : The main configuration file for the Geant4 simulation engine.
       * ``config/simulation/step_hit_processor_factory.conf`` : The definitions of the *step MC hit processors*
         associated to the sensitive detectors in the geometry.
       * ``config/simulation/particles.conf`` : The configuration file to activate the set of particles to be tracked by Geant4.
       * ``config/simulation/em.conf`` : The configuration file to activate electromagnetic processes within Geant4.
       * ``config/simulation/geant4_visualization.mac`` : A sample Geant4 visualization macro (for interactive mode only).

     * Simulation through the data processing pipeline (``bxdpp_processing``):

       * ``config/pipeline/dlls.conf`` : the list of shared libraries to be dynamically loaded.
       * ``config/pipeline/module_manager.conf`` : the main configuration file of the *data processing
         module manager* embeded in the ``dpp_processing`` program.
       * ``config/pipeline/service_manager.conf`` : the main configuration of the *service manager* embeded in the
         ``dpp_processing`` program and used by the *module manager*.
       * ``config/pipeline/services.conf`` :  the definitions of the *services* used by the *data processing modules*.
         Here we define the *Geometry service* which wraps the *geometry manager*
         initialized from the ``config/geometry/manager.conf`` file (see above).
       * ``config/pipeline/modules.conf`` : the definitions of the *data processing modules* used along the pipeline
         Here we use only one *simulation module* which wraps the *Geant4 simulation manager* initialized
         from the ``config/pipeline/g4_manager.conf`` file (see below).
       * ``config/pipeline/g4_manager.conf`` : The main configuration file for the *Geant4 simulation manager*
         used through the pipeline.

 * Built objects :

     * ``lib/libmctools_ex00.so`` : the dedicated shared library for this example.
     * ``ex00_read_plain_simdata`` : the executable linked against the ``mctools_ex00`` library
       and the Bayeux library.
       It enables the reading of simulated data objects generated by the ``bxg4_production`` program, print them
       and displays Gnuplot based 3D view.
     * ``ex00_read_pipeline_simdata`` : the executable linked against the ``mctools_ex00`` library
       and the Bayeux library.
       It enables the reading of simulated data objects generated by the ``bxdpp_processing`` program (data processing pipeline
       with an embedded Geant4 simulation processing module), print them and displays Gnuplot based 3D view.

 * Build method: CMake.


Quick start
===========

1. Build, install and setup the ``mctools`` library.
2. Make a copy of the example directory::

      $ cp -a [mctools install base directory]/share/mctools/examples/ex00 /tmp/ex00
      $ cd /tmp/ex00

3. Build and install the example program::

      $ mkdir __build
      $ cd __build
      $ cmake \
        -DCMAKE_INSTALL_PREFIX=.. \
	-DCMAKE_FIND_ROOT_PATH:PATH=$(bxquery --prefix) \
        ..
      $ make
      $ make install
      $ cd ..

4. Standalone Geometry:

   First create the ``CONFIG_DIR`` environment variable: ::

     $ export CONFIG_DIR="$(pwd)/config"


   a. Run the ``bxgeomtools_inspector`` to check the virtual geometry: ::

         $ bxgeomtools_inspector \
                  --manager-config ${CONFIG_DIR}/geometry/manager.conf \
                  --with-visu --visu-view-3d
         geomtools> help
         geomtools> display -3d world
         geomtools> display [1000:0]
         geomtools> display [2020:0.0]
         geomtools> export_gdml
         geomtools> quit

      It displays views of the setup using the ``geomtools`` Gnuplot viewer.

      .. image:: images/ex00_geometry_1.jpg
         :width: 200
         :scale: 25 %
         :alt: The 3D view of the setup (file ``images/ex00_geometry_1.jpg``)
         :align: center

      .. image:: images/ex00_geometry_2.jpg
         :width: 200
         :scale: 25 %
         :alt: The 2D view of the setup (file ``images/ex00_geometry_2.jpg``)
         :align: center

   b. ROOT display of the setup via the ``mctools_ex00-1.0.gdml`` GDML file: ::

         $ root
         root [0] TGeoManager * geo = new TGeoManager("geo","mctools examples/ex00 virtual setup");
         root [1] TGeoManager * g2 = geo->Import("mctools_ex00-1.0.gdml");
         root [2] g2->SetVisOption(0);
         root [3] g2->SetVisLevel(100);
         root [4] g2->GetMasterVolume()->Draw("");


      Select ``Wiew|View With|OpenGL`` and type the ``t``, ``r`` and ``w`` to switch different rendering modes.

      To exit the ROOT shell: ::

         root [5] .q

      It displays a 3D view of the setup using the ROOT visualization tool.

      .. image:: images/ex00_geometry_3.jpg
         :width: 200
         :scale: 25 %
         :alt: The OpenGL 3D view of the setup from ROOT (file ``images/ex00_geometry_3.jpg``)
         :align: center

5. Standalone event generation:

    a. Show the list of available generators: ::

         $ bxgenbb_inspector \
                  --configuration "${CONFIG_DIR}/event_generator/manager.conf" \
                  --action "list"
         List of particle generators: :
         |-- electron_1MeV                  : genbb::single_particle_generator (not initialized)
         |-- electron_1MeV_cone             : genbb::single_particle_generator (not initialized)
         |-- electron_1MeV_gaussian_100keV  : genbb::single_particle_generator (not initialized)
         |-- electron_2MeV                  : genbb::single_particle_generator (not initialized)
         |-- electron_3MeV                  : genbb::single_particle_generator (not initialized)
         |-- electron_50-2000keV_flat       : genbb::single_particle_generator (not initialized)
         `-- electron_pdf                   : genbb::single_particle_generator (not initialized)

    b. Shoot some primary events from one event generator: ::

         $ bxgenbb_inspector \
                  --configuration "${CONFIG_DIR}/event_generator/manager.conf" \
                  --action "shoot" \
                  --generator "electron_1MeV_gaussian_100keV" \
                  --prng-seed 314159 \
                  --number-of-events 10000 \
                  --output-file "histos_electron_1MeV_gaussian_100keV.root"

       or: ::

         $ bxgenbb_inspector \
                  --configuration "${CONFIG_DIR}/event_generator/manager.conf" \
                  --action "shoot" \
                  --generator "C12_monokinetic_125MeV" \
                  --prng-seed 314159 \
                  --number-of-events 100 \
                  --output-file "histos_C12_monokinetic_125MeV.root"

       or: ::

         $ bxgenbb_inspector \
                  --configuration "${CONFIG_DIR}/event_generator/manager.conf" \
                  --action "shoot" \
                  --generator "save" \
                  --prng-seed 314159 \
                  --number-of-events 100

    c. Display histograms associated to the event kinematics: ::

         $ root histos_electron_1MeV_gaussian_100keV.root
         root [1] TBrowser b; // then use the GUI to display the histograms
         root [2] .q


       It displays some histograms related to the kinematics of the 2MeV electrons.

       .. image:: images/ex00_genbb_electron_1MeV_gaussian_100keV_prompt_electron_0_energy.jpg
          :width: 200
          :scale: 25 %
          :alt: The first prompt electron energy spectrum in the ^60^Co decay (file ``images/ex00_genbb_electron_1MeV_gaussian_100keV_prompt_electron_0_energy.jpg``)
          :align: center

6. Standalone vertex generation:

    a. Show the list of available generators: ::

         $ bxgenvtx_production \
                 --geometry-manager "${CONFIG_DIR}/geometry/manager.conf" \
                 --vertex-generator-manager "${CONFIG_DIR}/vertex_generator/manager.conf" \
                 --list
         List of vertex generators :
         |-- lab_all_walls.vg  : Vertex generation from the surface of the experimental hall
         |-- lab_roof.vg  : Vertex generation from the surface of the experimental hall's roof
         |-- scin_bulk.vg  : Vertex generation from the bulk of the scintillator blocks
         |-- scin_bulk_deep.vg  : Vertex generation from the bulk of the scintillator blocks
         |-- scin_surface.vg  : Vertex generation from the surface of the scintillator blocks
         |-- scin_wrapping_all_bulk.vg  : Vertex generation from the bulk of scintillator block wrapping films (all sides)
         |-- scin_wrapping_front_back_bulk.vg  : Vertex generation from the bulk of scintillator block wrapping films (front and back sides)
         |-- scin_wrapping_left_right_bulk.vg  : Vertex generation from the bulk of scintillator blocks wrapping films (left and right sides)
         |-- scin_wrapping_top_bulk.vg  : Vertex generation from the bulk of scintillator block wrapping film (only top side)
         |-- source_bulk.vg (current) : Vertex generation from the source bulk
         |-- source_support_bulk.vg  : Vertex generation from the source bulk
         `-- source_surface.vg  : Vertex generation from the source bulk


    b. Shoot some random vertex generators and visualize them: ::

         $ bxgenvtx_production \
                 --geometry-manager "${CONFIG_DIR}/geometry/manager.conf" \
                 --vertex-generator-manager "${CONFIG_DIR}/vertex_generator/manager.conf" \
                 --shoot \
                 --number-of-vertices 400 \
                 --prng-seed 314159 \
                 --vertex-generator "source_bulk.vg" \
                 --output-file "mctools_ex00_vertices.txt" \
                 --visu --tiny

      It displays a 3D view of the setup with the positions of the generated vertexes
      from the bulk of the source film.

      .. image:: images/ex00_vertex_generator_source_bulk.jpg
         :width: 200
         :scale: 25 %
         :alt: The generated vertexes from the bulk of the source film (file ``images/ex00_vertex_generator_source_bulk.jpg``)
         :align: center


    c. Another random vertex generators: ::

         $ bxgenvtx_production \
                 --geometry-manager "${CONFIG_DIR}/geometry/manager.conf" \
                 --vertex-generator-manager "${CONFIG_DIR}/vertex_generator/manager.conf" \
                 --shoot \
                 --number-of-vertices 2000 \
                 --prng-seed 314159 \
                 --vertex-generator "scin_wrapping_all_bulk.vg" \
                 --output-file "mctools_ex00_vertices2.txt" \
                 --visu --tiny

      .. image:: images/ex00_vertex_generator_scin_wrapping_all_bulk.jpg
         :width: 200
         :scale: 25 %
         :alt: The generated vertexes from the bulk of the scintillator wrapping film (file ``images/ex00_vertex_generator_scin_wrapping_all_bulk.jpg``)
         :align: center


7. Geant4 simulation:

    a. Run the Geant4 simulation through a Geant4 interactive session with visualization: ::

         $ bxg4_production \
                --logging-priority "warning" \
                --number-of-events-modulo 1 \
                --interactive \
                --g4-visu \
                --config "${CONFIG_DIR}/simulation/manager.conf" \
                --vertex-generator-name "source_bulk.vg" \
                --vertex-generator-seed 0 \
                --event-generator-name "electron_1MeV_cone" \
                --event-generator-seed 0 \
                --shpf-seed 0 \
                --g4-manager-seed 0 \
                --output-prng-seeds-file "prng_seeds.save" \
                --output-prng-states-file "prng_states.save" \
		--output-profiles "all_details" \
                --output-data-file "mctools_ex00_electron_1MeV_source_bulk.xml" \
                --g4-macro "${CONFIG_DIR}/simulation/geant4_visualization.mac"

      or: ::

         $ bxg4_production \
                --logging-priority "warning" \
                --number-of-events-modulo 1 \
                --interactive \
                --g4-visu \
                --config "${CONFIG_DIR}/simulation/manager.conf" \
                --vertex-generator-name "source_surface.vg" \
                --vertex-generator-seed 0 \
                --event-generator-name "Li6_monokinetic_100MeV" \
                --event-generator-seed 0 \
                --shpf-seed 0 \
                --g4-manager-seed 0 \
                --output-prng-seeds-file "prng_seeds.save" \
                --output-prng-states-file "prng_states.save" \
		--output-profiles "all_details" \
                --output-data-file "mctools_ex00_Li6_monokinetic_100MeV_source_surface.xml" \
                --g4-macro "${CONFIG_DIR}/simulation/geant4_visualization.mac"

      From the Geant4 interactive session::

         Idle> /vis/viewer/set/viewpointThetaPhi -60 45
         Idle> /run/beamOn 10
         Idle> exit

      It displays the virtual geometry setup using the Geant4 visualization driver.

      Snapshots:

      * The Geant4 visualization of the geometry:

         .. image:: images/ex00_g4_production_0.jpg
            :width: 200
            :scale: 25 %
            :alt: The Geant4 visualization of the geometry (file ``images/ex00_g4_production_0.jpg``)
            :align: center

      * The Geant4 visualization of a 1MeV electron emitted from the source film and backscatterred on the absorber foil:

         .. image:: images/ex00_g4_production_1.jpg
            :width: 200
            :scale: 25 %
            :alt: The Geant4 visualization of a 1MeV electron emitted from the source film and backscatterred on the absorber foil (file ``images/ex00_g4_production_1.jpg``)
            :align: center

      * The Geant4 visualization of a 1MeV electron emitted from the source film and stopped in the scintillator block:

         .. image:: images/ex00_g4_production_2.jpg
            :width: 200
            :scale: 25 %
            :alt: The Geant4 visualization of a 1MeV electron emitted from the source film and stopped in the scintillator block (file ``images/ex00_g4_production_2.jpg``)
            :align: center

      *  The Geant4 visualization of many 1MeV electrons emitted in a cone from the bulk of the source film:

         .. image:: images/ex00_g4_production_3.jpg
            :width: 200
            :scale: 25 %
            :alt: The Geant4 visualization of many 1MeV electrons emitted from the source film (file ``images/ex00_g4_production_3.jpg``)
            :align: center


      You may then browse the output plain simulated data file: ::

         $ ls -l mctools_ex00_electron_1MeV_source_bulk.xml
         $ export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
         $ ./ex00_read_plain_simdata \
                 --logging-priority "notice" \
                 --interactive \
                 --with-visualization \
                 --input-file "mctools_ex00_electron_1MeV_source_bulk.xml"

      Snapshots:

      * The geomtools 3D visualization of a recorded simulated event:

         .. image:: images/ex00_g4_production_4.jpg
            :width: 200
            :scale: 25 %
            :alt: The geomtools 3D visualization of a recorded simulated event (file ``images/ex00_g4_production_4.jpg``)
            :align: center

      * The geomtools 3D visualization of a recorded simulated event with an electron stopped in the scintillator block after scattering the absorber foil:

         .. image:: images/ex00_g4_production_5.jpg
            :width: 200
            :scale: 25 %
            :alt: The geomtools 3D visualization of a recorded simulated event with an electron stopped in the scintillator block after scattering the absorber foil (file ``images/ex00_g4_production_5.jpg``)
            :align: center

      * The geomtools XZ-visualization of a recorded simulated event with an electron stopped in the scintillator block after scattering the absorber foil:

         .. image:: images/ex00_g4_production_6.jpg
            :width: 200
            :scale: 25 %
            :alt: The geomtools XZ-visualization of a recorded simulated event with an electron stopped in the scintillator block after scattering the absorber foil (file ``images/ex00_g4_production_6.jpg``)
            :align: center

      * Detailed XZ-view of the electron hit in the scintillator block with superimposed electron track:

         .. image:: images/ex00_g4_production_7.jpg
            :width: 200
            :scale: 25 %
            :alt: Detailed XZ-view of the electron hit in the scintillator block with superimposed electron track (file ``images/ex00_g4_production_7.jpg``)
            :align: center

    b. Run the Geant4 simulation in non-interactive mode::

         $ bxg4_production \
                --logging-priority "warning" \
                --number-of-events 100 \
                --number-of-events-modulo 0 \
                --batch \
                --config "${CONFIG_DIR}/simulation/manager.conf" \
                --vertex-generator-name "source_bulk.vg" \
                --vertex-generator-seed 0 \
                --event-generator-name "electron_1MeV" \
                --event-generator-seed 0 \
                --shpf-seed 0 \
                --g4-manager-seed 0 \
                --output-prng-seeds-file "prng_seeds.save" \
                --output-prng-states-file "prng_states.save" \
                --output-data-file "mctools_ex00_electron_1MeV_source_bulk.data.gz"

       Then browse the output plain simulated data file ::

         $ ls -l mctools_ex00_electron_1MeV_source_bulk.data.gz
         $ ./ex00_read_plain_simdata \
                 --logging-priority "notice" \
                 --interactive \
                 --with-visualization \
                 --input-file "mctools_ex00_electron_1MeV_source_bulk.data.gz"


       Detailed YZ-view of an electron emitted from the source film then absorbed in the source support:

          .. image:: images/ex00_g4_production_8.jpg
             :width: 200
             :scale: 25 %
             :alt: Detailed YZ-view of an electron absorbed in the source support (file ``images/ex00_g4_production_8.jpg``)
             :align: center

    c. Run the Geant4 simulation through the data processing pipeline::

         $ bxdpp_processing \
          --logging-priority "notice" \
          --dlls-config "${CONFIG_DIR}/pipeline/dlls.conf" \
          --module-manager-config "${CONFIG_DIR}/pipeline/module_manager.conf" \
          --max-records 1000 \
          --modulo 100 \
          --module "electron_1MeV_cone@source_bulk" \
          --output-file "mctools_ex00_electron_1MeV_cone@source_bulk.dpp.brio"

       The output data file uses the Brio format and stores the
       simulated data within ``datatools::things`` object records::

         $ ls -l mctools_ex00_electron_1MeV_cone@source_bulk.dpp.brio
         $ ./ex00_read_pipeline_simdata \
                 --logging-priority "notice" \
                 --interactive \
                 --with-visualization \
                 --dump-data-record \
                 --dump-simulated-data \
                 --dump-hits \
                 --input-file "mctools_ex00_electron_1MeV_cone@source_bulk.dpp.brio"

       Snapshots:

        * The 3D-view of the simulated electron track with a scintillator hit:

          .. image:: images/ex00_g4_pipeline_2.jpg
             :width: 200
             :scale: 25 %
             :alt: The 3D-view of the simulated electron track with a scintillator hit (file ``images/ex00_g4_pipeline_2.jpg``)
             :align: center

        * The print of the event data record (class ``datatools::things``) with its embedded simulated data bank :

          .. image:: images/ex00_g4_pipeline_00.jpg
             :width: 200
             :scale: 25 %
             :alt: The print of the event data record with its embedded simulated data bank (file ``images/ex00_g4_pipeline_0.jpg``)
             :align: center

        * The print of the content of the simulated data bank (class ``mctools::simulated_data``) :

          .. image:: images/ex00_g4_pipeline_0.jpg
             :width: 200
             :scale: 25 %
             :alt: The print of the content of the simulated data bank (file ``images/ex00_g4_pipeline_0.jpg``)
             :align: center

        * The print of a ``__visu.tracks`` in the lab volume (class ``mctools::base_step_hit``) :

          .. image:: images/ex00_g4_pipeline_1.jpg
             :width: 200
             :scale: 25 %
             :alt: The print of a ``__visu.tracks`` in the lab volume (file ``images/ex00_g4_pipeline_1.jpg``)
             :align: center

        * The print of a ``__visu.tracks`` in the scintillator block (class ``mctools::base_step_hit``) :

          .. image:: images/ex00_g4_pipeline_1a.jpg
             :width: 200
             :scale: 25 %
             :alt: The print of a ``__visu.tracks`` in the scintillator block (file ``images/ex00_g4_pipeline_1a.jpg``)
             :align: center

        * The print of a ``scin`` hit in the scintillator block (class ``mctools::base_step_hit``):

          .. image:: images/ex00_g4_pipeline_1b.jpg
             :width: 200
             :scale: 25 %
             :alt: The print of a hit in the scintillator block (file ``images/ex00_g4_pipeline_1b.jpg``)
             :align: center

8. Clean::

      $ rm ex00_read_plain_simdata
      $ rm ex00_read_pipeline_simdata
      $ rm geomtools_inspector.C
      $ rm histos_electron_1MeV_gaussian_100keV.root
      $ rm -fr lib/
      $ rm mctools_ex00-1.0.gdml
      $ rm mctools_ex00_electron_1MeV_cone@source_bulk.dpp.brio
      $ rm mctools_ex00_electron_1MeV_source_bulk.data.gz
      $ rm mctools_ex00_electron_1MeV_source_bulk.xml
      $ rm mctools-ex00_README.html
      $ rm mctools_ex00_vertices2.txt
      $ rm mctools_ex00_vertices_source_bulk.vg.txt
      $ rm mctools_ex00_vertices.txt
      $ rm prng_seeds.save
      $ rm prng_seeds.save.~backup~
      $ rm prng_states.save
      $ rm prng_states.save.~backup~
      $ rm -fr __build/

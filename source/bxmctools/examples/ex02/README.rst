=========================
mctools ``examples/ex02``
=========================

Introduction
============

 * Description:

   This  example  illustrates how  to  use  the Bayeux/mctools  Geant4
   engine  (from the  ``Bayeux_mctools_geant4``  library) to  simulate
   monokinetic C12(2+) ions emitted from  a beam source and track them
   in an electric field defined by a simple virtual geometry.

   It is first shown how  to use the ``bxgeomtools_inspector`` utility
   to visualize  the setup and generate  a GDML file usable  by Geant4
   and browsable by ROOT.

   The event  and vertex  generators are also  tested in  a standalone
   mode      thanks     to      the     ``bxgenbb_inspector``      and
   ``bxgenvtx_production`` programs respectively.

   The  ``bxg4_production`` program  is  used to  run  a Geant4  based
   Monte-Carlo simulation  and produce  an output simulated  data file
   both   in   interactive   mode  with   Geant4   visualization   and
   non-interactive (batch) mode.

   A  sample program  is  provided  to print  and  display the  output
   simulated  data file  which contains  plain object  records of  the
   ``mctools::simulated_data`` class.

 * Source files :

   * ``ex02_inspector.h`` and ``ex02_inspector.cc`` : the simulated data
     inspector class.

   * ``ex02_read_plain_simdata.cxx`` : the program to browse plain simulated data
     archive files as generated by the ``g4_production`` program.

 * Configuration files :

   * Geometry :

     * ``config/geometry/manager.conf`` : the  main configuration file
       of the geometry manager.
     * Geometry models files:

       + ``config/geometry/models/world.geom`` : the geometry model that represents
         the top volume (*world*).
       + ``config/geometry/models/lab.geom`` : the geometry model that represents the
         experimental area where the setup is installed and additional geometry volumes.
       + ``config/geometry/models/detector.geom``: the geometry models that represent
         the detection module (*sensitive* volume).
       + ``config/geometry/models/beam.geom`` : the geometry models that represent
         the beam setup.

     * ``config/geometry/gids/categories.lis`` : the file that defines the
       list of *geometry categories* used to assign *geometry IDs* to the
       volumes in the hierarchy.
     * Geometry plugins:

       + ``config/geometry/plugins/materials_plugin.conf`` :  the file
       that  defines the  *materials*  plugin. At  least one  material
       plugin must be  provided to export the geometry  hierarchy in a
       GDML file.  One single plugin  is provided which relies  on the
       following files:

         - ``config/geometry/plugins/materials_aliases.conf``   :  the
           definition file for material aliases.

       + ``config/geometry/plugins/electromagnetic_field_plugin.conf`` :
         the file that defines the *electro fields* plugin. One single
         plugin is provided which relies on the following files:

         - ``config/geometry/plugins/electric_field_manager.conf``   :
           the main  configuration file for the  electromagnetic field
           manager.
         - ``config/geometry/plugins/electric_fields.conf``    :   the
           definitions of the electric field modelized in this setup.

   * Event generation:

     * ``config/event_generator/manager.conf``     :      The     main
       configuration   file   for    the   event   generator   manager
       (``genbb::manager`` class).
     * ``config/event_generator/generators/guns.conf``      :      The
       definitions of some event generators.

   * Vertex generation:

     * ``config/vertex_generator/manager.conf``     :     The     main
       configuration   file   for   the   vertex   generator   manager
       (``genvtx::manager`` class).
     * ``config/vertex_generator/generators/vertex_generators.conf`` :
       The definitions of some vertex generators.

   * Geant4 simulation:

     * Plain simulation (``bxg4_production``):

       * ``config/simulation/manager.conf``  : The  main configuration
         file for the Geant4 simulation engine.
       * ``config/simulation/hits/step_hit_processor_factory.conf``  :
         The definitions of the *step MC hit processors* associated to
         the sensitive detectors in the geometry.
       * ``config/simulation/physics/particles.conf``       :      The
         configuration file  to activate  the set  of particles  to be
         tracked by Geant4.
       * ``config/simulation/physics/em.conf``  :   The  configuration
         file to activate electromagnetic processes within Geant4.
       * ``config/simulation/sensitive/detector.conf``      :      The
         configuration file for sensitive detector.
       * ``config/simulation/geant4_visualization.mac``  :   A  sample
         Geant4 visualization macro (for interactive mode only).

 * Built objects :

     * ``lib/libmctools_ex02.so`` :  the dedicated shared  library for
       this example.
     * ``ex02_read_plain_simdata`` : the executable linked against the
       ``mctools_ex02`` library  and the  Bayeux library.   It enables
       the  reading  of  simulated   data  objects  generated  by  the
       ``bxg4_production``  program, print  them and  displays Gnuplot
       based 3D view.

 * Build method: CMake.


Quick start
===========

1. Build, install and setup the ``mctools`` library.
2. Make a copy of the example directory::

      $ cp -a [mctools install base directory]/share/mctools/examples/ex02 /tmp/ex02
      $ cd /tmp/ex02

3. Build and install the example program::

      $ mkdir _build.d
      $ cd _build.d
      $ cmake \
        -DCMAKE_INSTALL_PREFIX=.. \
	-DCMAKE_FIND_ROOT_PATH:PATH=$(bxquery --prefix) \
        ..
      $ make
      $ make install
      $ cd ..
      $ ls -al lib/libmctools_ex02.so ex02_read_plain_simdata

4. Standalone Geometry:

   First create the ``CONFIG_DIR`` environment variable: ::

     $ export CONFIG_DIR="$(pwd)/config"


   a. Run the ``bxgeomtools_inspector`` to check the virtual geometry: ::

         $ bxgeomtools_inspector \
                  --manager-config ${CONFIG_DIR}/geometry/manager.conf \
                  --with-visu --visu-view-3d
         geomtools> help
         geomtools> display -3d world
         geomtools> display [1000:0]
         geomtools> display [2020:0]
         geomtools> export_gdml
         geomtools> quit

      It displays views of the setup using the ``geomtools`` Gnuplot viewer.

   b. ROOT display of the setup via the ``mctools_ex02-1.0.gdml`` GDML file: ::

         $ root
         root [0] TGeoManager * geo = new TGeoManager("geo","mctools examples/ex02 virtual setup");
         root [1] TGeoManager * g2 = geo->Import("mctools_ex02-1.0.gdml");
         root [2] g2->SetVisOption(0);
         root [3] g2->SetVisLevel(100);
         root [4] g2->GetMasterVolume()->Draw("");

      Select ``View|View With|OpenGL`` and type the ``t``, ``r`` and ``w`` to switch different rendering modes.

      To exit the ROOT shell: ::

         root [5] .q

      It displays a 3D view of the setup using the ROOT visualization tool.

5. Standalone event generation:

    a. Show the list of available generators: ::

         $ bxgenbb_inspector \
                  --configuration "${CONFIG_DIR}/event_generator/manager.conf" \
                  --action "list"
         List of particle generators: :
         |-- C12_ion_2plus_monokinetic_100eV : genbb::single_particle_generator (not initialized)
         |-- C12_ion_2plus_monokinetic_10keV : genbb::single_particle_generator (not initialized)
         `-- C12_ion_2plus_monokinetic_1keV : genbb::single_particle_generator (not initialized)

    b. Shoot some primary events from one event generator: ::

         $ bxgenbb_inspector \
                  --configuration "${CONFIG_DIR}/event_generator/manager.conf" \
                  --action "shoot" \
                  --generator "C12_ion_2plus_monokinetic_10keV" \
                  --prng-seed 314159 \
                  --number-of-events 10000 \
                  --output-file "histos_ion.root"

    c. Display histograms associated to the event kinematics: ::

         $ root histos_ion.root
         root [1] TBrowser b; // then use the GUI to display the histograms
         root [2] .q

    d. Shoot some primary events from one event generator and store then in a XML file: ::

         $ bxgenbb_inspector \
                  --configuration "${CONFIG_DIR}/event_generator/manager.conf" \
                  --action "shoot" \
                  --generator "C12_ion_2plus_monokinetic_10keV" \
                  --number-of-events 2 \
                  --prng-seed 314159 \
		  --output-mode "plain" \
                  --output-file "ions.xml"

    e. Check the Boost XML archive based output file: ::

	 $ less ions.xml


6. Standalone vertex generation:

    a. Show the list of available generators: ::

         $ bxgenvtx_production \
                 --geometry-manager "${CONFIG_DIR}/geometry/manager.conf" \
                 --vertex-generator-manager "${CONFIG_DIR}/vertex_generator/manager.conf" \
                 --list
         List of vertex generators :
         `-- gun_mouth_point.vg (current) : Point-like vertex generation from the gun mouth

    b. Shoot some random vertex generators and visualize them: ::

         $ bxgenvtx_production \
                 --geometry-manager "${CONFIG_DIR}/geometry/manager.conf" \
                 --vertex-generator-manager "${CONFIG_DIR}/vertex_generator/manager.conf" \
                 --shoot \
                 --number-of-vertices 400 \
                 --prng-seed 314159 \
                 --vertex-generator "gun_mouth_point.vg" \
                 --output-file "mctools_ex02_vertices.txt" \
                 --visu --tiny

      It displays a 3D view of the setup with the positions of the generated vertexes
      from the bulk of the source film.


7. Geant4 simulation:

    a. Run the Geant4 simulation through a Geant4 interactive session with visualization: ::

        $ bxg4_production \
            --logging-priority "warning" \
            --number-of-events-modulo 1 \
            --interactive \
            --g4-visu \
            --config "${CONFIG_DIR}/simulation/manager.conf" \
            --vertex-generator-name "gun_mouth_point.vg" \
            --vertex-generator-seed 0 \
            --event-generator-name "C12_ion_2plus_monokinetic_1keV" \
            --event-generator-seed 0 \
            --shpf-seed 0 \
            --g4-manager-seed 0 \
            --output-prng-seeds-file "prng_seeds.save" \
            --output-prng-states-file "prng_states.save" \
            --output-profiles "all_details" \
            --output-data-file "mctools_ex02_output.xml" \
            --g4-macro "${CONFIG_DIR}/simulation/geant4_visualization.mac"

        $ bxg4_production \
            --logging-priority "warning" \
            --number-of-events-modulo 1 \
            --interactive \
            --g4-visu \
            --config "${CONFIG_DIR}/simulation/manager.conf" \
            --vertex-generator-name "gun_mouth_point.vg" \
            --vertex-generator-seed 0 \
            --event-generator-name "C12_nucleus_monokinetic_1keV" \
            --event-generator-seed 0 \
            --shpf-seed 0 \
            --g4-manager-seed 0 \
            --output-prng-seeds-file "prng_seeds.save" \
            --output-prng-states-file "prng_states.save" \
            --output-profiles "all_details" \
            --output-data-file "mctools_ex02_output.xml" \
            --g4-macro "${CONFIG_DIR}/simulation/geant4_visualization.mac"

        $ bxg4_production \
            --logging-priority "warning" \
            --number-of-events-modulo 1 \
            --interactive \
            --g4-visu \
            --config "${CONFIG_DIR}/simulation/manager.conf" \
            --vertex-generator-name "gun_mouth_point.vg" \
            --vertex-generator-seed 0 \
            --event-generator-name "electron_monokinetic_100keV" \
            --event-generator-seed 0 \
            --shpf-seed 0 \
            --g4-manager-seed 0 \
            --output-prng-seeds-file "prng_seeds.save" \
            --output-prng-states-file "prng_states.save" \
            --output-profiles "all_details" \
            --output-data-file "mctools_ex02_output.xml" \
            --g4-macro "${CONFIG_DIR}/simulation/geant4_visualization.mac"

        $ bxg4_production \
            --logging-priority "warning" \
            --number-of-events-modulo 1 \
            --interactive \
            --g4-visu \
            --config "${CONFIG_DIR}/simulation/manager.conf" \
            --vertex-generator-name "gun_mouth_point.vg" \
            --vertex-generator-seed 0 \
            --event-generator-name "C12_ion_2plus_monokinetic_10keV" \
            --event-generator-seed 0 \
            --shpf-seed 0 \
            --g4-manager-seed 0 \
            --output-prng-seeds-file "prng_seeds.save" \
            --output-prng-states-file "prng_states.save" \
            --output-profiles "all_details" \
            --output-data-file "mctools_ex02_output.xml" \
            --g4-macro "${CONFIG_DIR}/simulation/geant4_visualization.mac"

        $ bxg4_production \
            --logging-priority "warning" \
            --number-of-events-modulo 1 \
            --interactive \
            --g4-visu \
            --config "${CONFIG_DIR}/simulation/manager.conf" \
            --vertex-generator-name "gun_mouth_point.vg" \
            --vertex-generator-seed 0 \
            --event-generator-name "C12_nucleus_monokinetic_10keV" \
            --event-generator-seed 0 \
            --shpf-seed 0 \
            --g4-manager-seed 0 \
            --output-prng-seeds-file "prng_seeds.save" \
            --output-prng-states-file "prng_states.save" \
            --output-profiles "all_details" \
            --output-data-file "mctools_ex02_output.xml" \
            --g4-macro "${CONFIG_DIR}/simulation/geant4_visualization.mac"

      or: ::

         $ bxg4_production \
                --logging-priority "warning" \
                --number-of-events-modulo 1 \
                --interactive \
                --g4-visu \
                --config "${CONFIG_DIR}/simulation/manager.conf" \
                --vertex-generator-name "source_surface.vg" \
                --vertex-generator-seed 0 \
                --event-generator-name "Li6_monokinetic_100MeV" \
                --event-generator-seed 0 \
                --shpf-seed 0 \
                --g4-manager-seed 0 \
                --output-prng-seeds-file "prng_seeds.save" \
                --output-prng-states-file "prng_states.save" \
		--output-profiles "all_details" \
                --output-data-file "mctools_ex02_output.xml" \
                --g4-macro "${CONFIG_DIR}/simulation/geant4_visualization.mac"

      From the Geant4 interactive session::

         Idle> /vis/viewer/set/viewpointThetaPhi -60 45
         Idle> /run/beamOn 10
         Idle> exit

      It displays the virtual geometry setup using the Geant4 visualization driver.


      You may then browse the output plain simulated data file: ::

         $ ls -l mctools_ex02_output.xml
         $ export LD_LIBRARY_PATH=./lib:${LD_LIBRARY_PATH}
         $ ./ex02_read_plain_simdata \
                 --logging-priority "notice" \
                 --interactive \
                 --with-visualization \
                 --input-file "mctools_ex02_output.xml"

    b. Run the Geant4 simulation in non-interactive mode::

         $ bxg4_production \
                --logging-priority "trace" \
                --number-of-events 100 \
                --number-of-events-modulo 0 \
                --batch \
                --config "${CONFIG_DIR}/simulation/manager.conf" \
                --vertex-generator-name "source_bulk.vg" \
                --vertex-generator-seed 0 \
                --event-generator-name "electron_1MeV" \
                --event-generator-seed 0 \
                --shpf-seed 0 \
                --g4-manager-seed 0 \
                --output-prng-seeds-file "prng_seeds.save" \
                --output-prng-states-file "prng_states.save" \
                --output-data-file "mctools_ex02_electron_1MeV_source_bulk.data.gz"

       Then browse the output plain simulated data file ::

         $ ls -l mctools_ex02_electron_1MeV_source_bulk.data.gz
         $ ./ex02_read_plain_simdata \
                 --logging-priority "notice" \
                 --interactive \
                 --with-visualization \
                 --input-file "mctools_ex02_electron_1MeV_source_bulk.data.gz"


       Detailed YZ-view of an electron emitted from the source film then absorbed in the source support:

          .. image:: images/ex02_g4_production_8.jpg
             :width: 200
             :scale: 25 %
             :alt: Detailed YZ-view of an electron absorbed in the source support (file ``images/ex02_g4_production_8.jpg``)
             :align: center

    c. Run the Geant4 simulation through the data processing pipeline::

         $ bxdpp_processing \
          --logging-priority "notice" \
          --dlls-config "${CONFIG_DIR}/pipeline/dlls.conf" \
          --module-manager-config "${CONFIG_DIR}/pipeline/module_manager.conf" \
          --max-records 1000 \
          --modulo 100 \
          --module "electron_1MeV_cone@source_bulk" \
          --output-file "mctools_ex02_electron_1MeV_cone@source_bulk.dpp.brio"

       The output data file uses the Brio format and stores the
       simulated data within ``datatools::things`` object records::

         $ ls -l mctools_ex02_electron_1MeV_cone@source_bulk.dpp.brio
         $ ./ex02_read_pipeline_simdata \
                 --logging-priority "notice" \
                 --interactive \
                 --with-visualization \
                 --dump-data-record \
                 --dump-simulated-data \
                 --dump-hits \
                 --input-file "mctools_ex02_electron_1MeV_cone@source_bulk.dpp.brio"

       Snapshots:

        * The 3D-view of the simulated electron track with a scintillator hit:

          .. image:: images/ex02_g4_pipeline_2.jpg
             :width: 200
             :scale: 25 %
             :alt: The 3D-view of the simulated electron track with a scintillator hit (file ``images/ex02_g4_pipeline_2.jpg``)
             :align: center

        * The print of the event data record (class ``datatools::things``) with its embedded simulated data bank :

          .. image:: images/ex02_g4_pipeline_00.jpg
             :width: 200
             :scale: 25 %
             :alt: The print of the event data record with its embedded simulated data bank (file ``images/ex02_g4_pipeline_0.jpg``)
             :align: center

        * The print of the content of the simulated data bank (class ``mctools::simulated_data``) :

          .. image:: images/ex02_g4_pipeline_0.jpg
             :width: 200
             :scale: 25 %
             :alt: The print of the content of the simulated data bank (file ``images/ex02_g4_pipeline_0.jpg``)
             :align: center

        * The print of a ``__visu.tracks`` in the lab volume (class ``mctools::base_step_hit``) :

          .. image:: images/ex02_g4_pipeline_1.jpg
             :width: 200
             :scale: 25 %
             :alt: The print of a ``__visu.tracks`` in the lab volume (file ``images/ex02_g4_pipeline_1.jpg``)
             :align: center

        * The print of a ``__visu.tracks`` in the scintillator block (class ``mctools::base_step_hit``) :

          .. image:: images/ex02_g4_pipeline_1a.jpg
             :width: 200
             :scale: 25 %
             :alt: The print of a ``__visu.tracks`` in the scintillator block (file ``images/ex02_g4_pipeline_1a.jpg``)
             :align: center

        * The print of a ``scin`` hit in the scintillator block (class ``mctools::base_step_hit``):

          .. image:: images/ex02_g4_pipeline_1b.jpg
             :width: 200
             :scale: 25 %
             :alt: The print of a hit in the scintillator block (file ``images/ex02_g4_pipeline_1b.jpg``)
             :align: center

8. Clean::

      $ rm ex02_read_plain_simdata
      $ rm ex02_read_pipeline_simdata
      $ rm geomtools_inspector.C
      $ rm histos_electron_1MeV_gaussian_100keV.root
      $ rm -fr lib/
      $ rm mctools_ex02-1.0.gdml
      $ rm mctools_ex02_electron_1MeV_cone@source_bulk.dpp.brio
      $ rm mctools_ex02_electron_1MeV_source_bulk.data.gz
      $ rm mctools_ex02_electron_1MeV_source_bulk.xml
      $ rm mctools-ex02_README.html
      $ rm mctools_ex02_vertices2.txt
      $ rm mctools_ex02_vertices_source_bulk.vg.txt
      $ rm mctools_ex02_vertices.txt
      $ rm prng_seeds.save
      $ rm prng_seeds.save.~backup~
      $ rm prng_states.save
      $ rm prng_states.save.~backup~
      $ rm -fr _build.d/

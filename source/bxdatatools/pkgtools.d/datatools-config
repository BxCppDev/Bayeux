#!/bin/bash
# -*- mode: shell-script; -*-
# datatools-config
#
# Note:
# This is a default config script provided by
# the mkskelpack program (from the PkgTools package).
# It suits the use of some default GNU/makefile
# generated in the package 'gmk' directory.
#
# Feel free to modify this file if you use another system
# to build/install this package (i.e. Autotools).
#
help=0

SCRIPTNAME="datatools-config"
THE_SYSTEM="$(uname -s)-$(uname -m | sed -e 's/ //g')"

THEPACK_ROOT=/usr/local
if [ -n "${DATATOOLS_ROOT}" ]; then
    THEPACK_ROOT="${DATATOOLS_ROOT}" 
else 
    echo "$SCRIPTNAME: error: 'DATATOOLS_ROOT' environment variable is not defined!" 
    exit 1
fi

THEPACK_INCLUDEDIR="$THEPACK_ROOT/include" 

THEPACK_LIBDIR="$THEPACK_ROOT/${THE_SYSTEM}/lib" 

THEPACK_BINDIR="$THEPACK_ROOT/${THE_SYSTEM}/bin" 

THEPACK_VERSION=0.1.0
if [ -f "$THEPACK_ROOT/VERSION" ]; then
    THEPACK_VERSION="$(cat $THEPACK_ROOT/VERSION)"    
elif [ -f "$THEPACK_ROOT/pkgtools.d/package.info"  ]; then
    version=$(cat $THEPACK_ROOT/pkgtools.d/package.info | grep "version=" | cut -d'=' -f2 )    
    THEPACK_VERSION=$version
fi

with_boost_pba=1
if [ "x${DATATOOLS_NO_PBA}" != "x0" ]; then
    with_boost_pba=0
fi

opt=$1

if [ "x$opt" = "x" ]; then
    echo "$SCRIPTNAME: error: Missing option!" 
    help=1
fi

if [ "x$opt" = "x--help" -o "x$opt" = "x-h" -o "x$opt" = "x-?" ]; then
    help=1
fi

if [ $help -eq 1 ]; then
    cat<<EOF
Usage: $SCRIPTNAME [OPTION]

Known values for OPTION are:

  --prefix              show datatools installation prefix
  --incdir              print include directory
  --libdir              print library directory
  --bindir              print binary directory
  --include             print include path pre-processor flags without dependencies 
  --cflags              print include path pre-processor flags with dependencies
  --libs                print library linking information, without dependencies
  --ldflags             
  --libs-depends        print library linking information, with dependencies
  --help                print this help then exit
  --version             print version information
  --system              print system

EOF
    exit 1
fi 

if [ "x$opt" = "x--system" ]; then
    echo "${THE_SYSTEM}"
    exit 0
fi 

if [ "x$opt" = "x--prefix" ]; then
    echo "${THEPACK_ROOT}"
    exit 0
fi 

if [ "x$opt" = "x--version" ]; then
    echo "${THEPACK_VERSION}"
    exit 0
fi 

if [ "x$opt" = "x--incdir" ]; then
    echo "${THEPACK_INCLUDEDIR}" 
    exit 0
fi

if [ "x$opt" = "x--include" ]; then
    echo "-I${THEPACK_INCLUDEDIR} " 
    exit 0
fi

if [ "x$opt" = "x--cflags" ]; then
    echo -n "-I${THEPACK_INCLUDEDIR} "  \
	"`boost-config --cflags` "
    if [ ${with_boost_pba} -eq 1 ]; then
        echo -n  "-DDATATOOLS_USE_PBA=1 "
        echo -n  "`pba-config --cflags`"
    fi
    echo

#    echo -n "-I${THEPACK_INCLUDEDIR} "  \
#         "`boost-config --cflags` " \
#        "`liblockfile-config --cflags` "  

    ################################################################
    # Please add here some stuff in order to take into account
    # external package dependencies; it may looks like:
    # echo "-I${THEPACK_INCLUDEDIR} " \
    #      "`XXX-config --include` "  (or --cflags)
    # where XXX stands for the identifier of the external package 
    ################################################################
    exit 0
fi

if [ "x$opt" = "x--libdir" ]; then
    echo "${THEPACK_LIBDIR}"
    exit 0
fi 

if [ "x$opt" = "x--bindir" ]; then
    echo "${THEPACK_BINDIR}"
    exit 0
fi 

if [ "x$opt" = "x--libs" ]; then
    echo "-L${THEPACK_LIBDIR} -ldatatools "
    exit 0
fi 

if [ "x$opt" = "x--libs-depends" -o "x$opt" = "x--ldflags" ]; then
    echo -n "-L${THEPACK_LIBDIR} -ldatatools "  \
	"`boost-config --ldflags serialization iostreams filesystem` " 
    if [ ${with_boost_pba} -eq 1 ]; then
        echo -n  "`pba-config --ldflags` "
    fi
    echo
#      "`liblockfile-config --ldflags` "  

    ################################################################
    # Please add here some stuff in order to take into account
    # external package dependencies; it may looks like:
    # echo "-L${THEPACK_LIBDIR} -ldatatools " \
    #      "`XXX-config --libs` " 
    # where XXX stands for the identifier of the external package 
    ################################################################
    exit 0
fi 

echo "$SCRIPTNAME: error: Unknown option!" 
$0 --help
exit 1

# end of datatools-config

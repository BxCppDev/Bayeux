#!/bin/bash
# -*- mode: shell-script; -*-
# datatools-config
#
# Note:
# This is a default config script provided by
# the mkskelpack program (from the PkgTools package).
# It suits the use of some default GNU/makefile
# generated in the package 'gmk' directory.
#
# Feel free to modify this file if you use another system
# to build/install this package (i.e. Autotools).
#
help=0

SCRIPTNAME="datatools-config"
COMP=gcc
COMPVER=$(${COMP} --version | head -1 | cut -d ' ' -f 3)
COMPILER=${COMP}${COMPVER}

###THE_SYSTEM="$(uname -s)-$(uname -m | sed -e 's/ //g')-${COMPILER}"
THE_SYSTEM="$(uname -s)-$(uname -m | sed -e 's/ //g')"

THEPACK_ROOT=/usr/local
if [ -n "${DATATOOLS_ROOT}" ]; then
    THEPACK_ROOT="${DATATOOLS_ROOT}" 
else 
    echo "$SCRIPTNAME: error: 'DATATOOLS_ROOT' environment variable is not defined!" 
    exit 1
fi

THEPACK_INCLUDEDIR="$THEPACK_ROOT/include" 

THEPACK_LIBDIR="$THEPACK_ROOT/${THE_SYSTEM}/lib" 

THEPACK_BINDIR="$THEPACK_ROOT/${THE_SYSTEM}/bin" 

THEPACK_VERSION=0.1.0
if [ -f "$THEPACK_ROOT/VERSION" ]; then
    THEPACK_VERSION="$(cat $THEPACK_ROOT/VERSION)"    
elif [ -f "$THEPACK_ROOT/pkgtools.d/package.info"  ]; then
    version=$(cat $THEPACK_ROOT/pkgtools.d/package.info | grep "version=" | cut -d'=' -f2 )    
    THEPACK_VERSION=$version
fi

# 2009-11-13 FM: add support for ser_bitset (vault)
with_boost_bitset=1
###if [ ! -L ${THEPACK_ROOT}/boost/vault/ser_bitset ]; then
if [ ! -d ${THEPACK_ROOT}/boost/vault/local ]; then
    with_boost_bitset=0
    export DATATOOLS_NO_BITSET=1
fi
with_boost_eos_pba=1
with_boost_fpu=1
if [ "x${DATATOOLS_NO_EOS_PBA}" == "x1" ]; then
    with_boost_eos_pba=0
fi
if [ "x${DATATOOLS_NO_FPU}" == "x1" ]; then
    with_boost_fpu=0
fi
opt=$1

if [ "x$opt" = "x" ]; then
    echo "$SCRIPTNAME: error: Missing option!" 
    help=1
fi

if [ "x$opt" = "x--help" -o "x$opt" = "x-h" -o "x$opt" = "x-?" ]; then
    help=1
fi

python_version_flag_file=${THEPACK_ROOT}/gmk/datatools_python_version.config

if [ $help -eq 1 ]; then
    cat<<EOF
Usage: $SCRIPTNAME [OPTION]

Known values for OPTION are:

  --prefix              show datatools installation prefix
  --incdir              print include directory
  --libdir              print library directory
  --bindir              print binary directory
  --include             print include path pre-processor flags without dependencies 
  --cflags              print include path pre-processor flags with dependencies
  --libs                print library linking information, without dependencies
  --ldflags             
  --libs-depends        print library linking information, with dependencies
  --help                print this help then exit
  --version             print version information
  --system              print system
  --with-python         print if Python module is used
  --python-version      print Python version
  --with-fpu            print if Floating Point Utility is used
  --with-eos-pba        print if Portable Binary Archive (EOS) is used
  --boost-version       print Boost version

EOF
    exit 1
fi 

if [ "x$opt" = "x--system" ]; then
    echo "${THE_SYSTEM}"
    exit 0
fi 

if [ "x$opt" = "x--prefix" ]; then
    echo "${THEPACK_ROOT}"
    exit 0
fi 

if [ "x$opt" = "x--version" ]; then
    echo "${THEPACK_VERSION}"
    exit 0
fi 

if [ "x$opt" = "x--incdir" ]; then
    echo "${THEPACK_INCLUDEDIR}" 
    exit 0
fi

if [ "x$opt" = "x--include" ]; then
    echo "-I${THEPACK_INCLUDEDIR} " 
    exit 0
fi

if [ "x$opt" = "x--cflags" ]; then
    (
	echo -n "-fPIC " 
	echo -n "-I${THEPACK_INCLUDEDIR} -DDATATOOLS_USE_TREE_DUMP=1 "  \
	    "`boost-config --cflags` "
	if [ ${with_boost_bitset} -eq 1 ]; then
            echo -n "-I${THEPACK_ROOT}/boost/vault/local "
	fi
	if [ ${with_boost_eos_pba} -eq 1 ]; then
            echo -n "-DIOFACTORY_USE_EOS_PBA=1 "
            echo -n "-I${THEPACK_ROOT}/boost/vault/eos_pba "
	fi
	if [ ${with_boost_fpu} -eq 1 ]; then
            echo -n "-DIOFACTORY_USE_FPU=1 "
            echo -n "-I${THEPACK_ROOT}/boost/vault/fpu "
	    echo -n "-I${THEPACK_ROOT}/boost/vault/endian "
	fi
	echo -n "`clhep-config --include` "
    ) | python ${THEPACK_ROOT}/pkgtools.d/mkuniqueflags.py 
    echo

    exit 0
fi

if [ "x$opt" = "x--libdir" ]; then
    echo "${THEPACK_LIBDIR}"
    exit 0
fi 

if [ "x$opt" = "x--bindir" ]; then
    echo "${THEPACK_BINDIR}"
    exit 0
fi 

if [ "x$opt" = "x--libs" ]; then
    echo "-L${THEPACK_LIBDIR} -ldatatools "
    exit 0
fi 

if [ "x$opt" = "x--libs-depends" -o "x$opt" = "x--ldflags" ]; then
    (
	echo -n "-L${THEPACK_LIBDIR} -ldatatools "  \
	    "`boost-config --ldflags serialization iostreams filesystem system` " 
	echo -n "`clhep-config --libs` -lm "
	###echo -n "-lcurses "
    ) | python ${THEPACK_ROOT}/pkgtools.d/mkuniqueflags.py -r
    echo
#      "`liblockfile-config --ldflags` "  
    exit 0
fi 

if [ "x$opt" = "x--with-eos-pba" ]; then
    echo "${with_boost_eos_pba}"
    exit 0
fi 

if [ "x$opt" = "x--with-fpu" ]; then
    echo "${with_boost_fpu}"
    exit 0
fi 

if [ "x$opt" = "x--python-version" ]; then
    if [ -f ${python_version_flag_file} ]; then
	cat ${python_version_flag_file}
    else
	echo -n "2.5"
	echo -n " (assumed)" >&2
	echo ""
	exit 1
    fi
    exit 0
fi 

if [ "x$opt" = "x--with-python" ]; then
    if [ -f ${python_version_flag_file} ]; then
	echo "1"
    else
	echo "0"
    fi
    exit 0
fi 

if [ "x$opt" = "x--boost-version" ]; then
    boost-config --version
    exit 0
fi 

echo "$SCRIPTNAME: error: Unknown option!" 
$0 --help
exit 1

# end of datatools-config

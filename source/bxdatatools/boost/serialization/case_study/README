-- README --
 
Author: F. Mauger <mauger@lpccaen.in2p3.fr>
Date:   2009-03-10

Copyright (c) 2008-2009 FranÃ§ois Mauger

Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at 
http://www.boost.org/LICENSE_1_0.txt)

Thanks to Robert Ramey, Johan Rade, Christian Pfligersdorffer and 
other boosters for their help.

Description:
------------

This sample code provides  some `generic' high-level reader and writer
classes able  to handle serialization of arbitrary  user classes using
the Boost serialization library.
 
It also  uses contributions from  the Boost vault (see  `boost' subdir
for a local copy coming with this sample).

It has been designed for Boost  1.34.1 and is known to run with Ubuntu
Linux 8.04/8.10 and Scientific Linux 4 (RedHat flavor) with gcc 4.X series.

This  sample code is  provided as  is without  garantee.  Enjoy  it if
possible!

Also  I'm afraid I  can provide  only limited  support to  help people
using it.  However I  would appreciate some  feedback or  proposal for
improvement or fix.

This sample has been extracted from a home-made library which has been
used for  more than  one year  to store critical  data from  a nuclear
physics experiment (total storage~TB). At  least it suits my needs and
never failed in the limits of the systems I use!


Contents:
---------

--
boost/ : 

Contains a copy of some contribution libraries from the 
Boost vault.

--
io_factory.h
io_factory.cc
i_serializable.h
safe_serial.h : 

Main class files.

--
GNUmakefile : 

A GNU/makefile that works for me under my Linux box. 

--
test_rw_0.cxx :  

This program illustrates the usage  of the high-level
`data_reader' and `data_writer' classes.

First  it creates  some random  objects  of two  differents types  and
stores  (serialize) them  within a  file using  some  underlying Boost
archive(s). The formatis set after the file extension.

Then it reloads (deserialize) the  list of objects from the previously
saved file, restoring the two sets of initial objects.

 Usage:

  test_rw_0 DATAFILE [seed] [multi] 
 
  where:

    DATAFILE is the name of the file to store/load serialized data.
    Extension must be choosen among the following list:
  
      .txt  : ASCII portable text archive
      .xml  : XML portable archive
      .data : portable binary archive

      suffix .gz or .bz2 can also be added to activate
      on the fly (de)compression.

    The `seed' is optionnal. It sets the random seed used
    to generate arbitrary data.

    The `multi' flag is optionnal. It sets the archive
    in `multi-archives' mode, meaning that each serialized object
    is confined within its own archive in the file. In such a way,
    the file has several stored archives.

    Default is a single archive per file, with many serialized objects
    in it.

 Examples:

  shell> test_rw_0 data.txt.gz ${RANDOM}

  shell> test_rw_0 data.txt.gz 314159

  shell> test_rw_0 data.data 0 multi

--
data_single.txt.gz
data_multi.txt.gz :

Sample I/O data files containing serialized data in gzipped text format.

`_single' uses only one archive for many serialized objects.
`_multi' uses one archive for each serialized object.
   

--

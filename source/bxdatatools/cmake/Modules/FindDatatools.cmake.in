# FindDatatools.cmake
# 
# A rather brute force version.
# 
## Locate datatools library
# This module defines
#  DATATOOLS_FOUND
#  DATATOOLS_VERSION
#  DATATOOLS_LIBRARIES
#  DATATOOLS_INCLUDE_DIRS, where to find datatools/datatools_config.h
#  DATATOOLS_WITH_BIO
#  DATATOOLS_WITH_PYTHON_WRAPPER
#  DATATOOLS_LIBRARIES_DEPEND
#  DATATOOLS_INCLUDE_DIRS_DEPEND

set ( DATATOOLS_VERSION             @datatools_VERSION_STR@ )
set ( DATATOOLS_WITH_PYTHON_WRAPPER @DATATOOLS_WITH_PYTHON_WRAPPER@ )
set ( DATATOOLS_WITH_BIO            @DATATOOLS_WITH_BIO@ )

message ( STATUS "FindDatatools: DATATOOLS_VERSION='${DATATOOLS_VERSION}'")
message ( STATUS "FindDatatools: DATATOOLS_WITH_BIO='${DATATOOLS_WITH_BIO}'")
message ( STATUS "FindDatatools: DATATOOLS_WITH_PYTHON_WRAPPER='${DATATOOLS_WITH_PYTHON_WRAPPER}'")

find_path (DATATOOLS_INCLUDE_DIRS datatools/datatools_config.h
  HINTS $ENV{DATATOOLS_ROOT_DIR}
  PATHS
  [HKEY_LOCAL_MACHINE\\SOFTWARE\\datatools]
  ~/Library/Frameworks
  /Library/Frameworks
  /usr/local
  /usr
  /sw # Fink
  /opt/local # DarwinPorts
  /opt/csw # Blastwave
  /opt
  PATH_SUFFIXES include
)

message ( STATUS "FindDatatools: DATATOOLS_INCLUDE_DIRS='${DATATOOLS_INCLUDE_DIRS}'")

find_library (_datatools_library 
  NAMES datatools
  HINTS $ENV{DATATOOLS_ROOT_DIR}
  PATHS
  [HKEY_LOCAL_MACHINE\\SOFTWARE\\datatools]
  ~/Library/Frameworks
  /Library/Frameworks
  /usr/local
  /usr
  /sw
  /opt/local
  /opt/csw
  /opt
  PATH_SUFFIXES lib64 lib
)

message ( STATUS "FindDatatools: _datatools_library='${_datatools_library}'")
set (_datatools_libraries "${_datatools_library}" )

if ( ${DATATOOLS_WITH_BIO} )
  find_library (_datatools_bio_library 
    NAMES datatools_bio
    HINTS $ENV{DATATOOLS_ROOT_DIR}
    PATHS
    [HKEY_LOCAL_MACHINE\\SOFTWARE\\datatools]
    ~/Library/Frameworks
    /Library/Frameworks
    /usr/local
    /usr
    /sw
    /opt/local
    /opt/csw
    /opt
    PATH_SUFFIXES lib64 lib
    )
  message ( STATUS "FindDatatools: _datatools_bio_library='${_datatools_bio_library}'")
  if ( NOT "${_datatools_bio_library}" STREQUAL "" )
     set (_datatools_libraries "${_datatools_bio_library}" "${_datatools_library}" )
     message ( STATUS "FindDatatools: _datatools_libraries='${_datatools_libraries}'")
  endif ()
endif ()

set ( DATATOOLS_LIBRARIES ${_datatools_libraries} )
message ( STATUS "FindDatatools: DATATOOLS_LIBRARIES='${DATATOOLS_LIBRARIES}'")

include (FindPackageHandleStandardArgs)
# handle the QUIETLY and REQUIRED arguments and set DATATOOLS_FOUND to TRUE if 
# all listed variables are TRUE
find_package_handle_standard_args (datatools DEFAULT_MSG DATATOOLS_LIBRARIES DATATOOLS_INCLUDE_DIRS)

set ( DATATOOLS_LIBRARIES_DEPEND 
      ${DATATOOLS_LIBRARIES}
      @Boost_LIBRARIES@
      @CLHEP_LIBRARIES@ 
      @KWSYS_LIBRARIES@ 
      "m"
    )

message ( STATUS "FindDatatools: DATATOOLS_LIBRARIES_DEPEND='${DATATOOLS_LIBRARIES_DEPEND}'")

if (DATATOOLS_WITH_PYTHON_WRAPPER)
  list ( APPEND DATATOOLS_LIBRARIES_DEPEND 
         python )
endif ()

set ( DATATOOLS_INCLUDE_DIRS_DEPEND
      ${DATATOOLS_INCLUDE_DIRS}
      @Boost_INCLUDE_DIRS@
      @CLHEP_INCLUDE_DIRS@
      @KWSYS_INCLUDE_DIRS@ 
    )

message ( STATUS "FindDatatools: DATATOOLS_INCLUDE_DIRS_DEPEND='${DATATOOLS_INCLUDE_DIRS_DEPEND}'")

mark_as_advanced (DATATOOLS_VERSION  
                  DATATOOLS_LIBRARY
                  DATATOOLS_WITH_PYTHON_WRAPPER
                  DATATOOLS_WITH_BIO
		  DATATOOLS_INCLUDE_DIRS 
                  DATATOOLS_LIBRARIES 
		  DATATOOLS_INCLUDE_DIRS_DEPEND 
                  DATATOOLS_LIBRARIES_DEPEND 
		  )

message ( STATUS "FindDatatools: DATATOOLS_FOUND=${DATATOOLS_FOUND}")

# end of FindDatatools.cmake

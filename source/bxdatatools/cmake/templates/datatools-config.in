#!/usr/bin/env bash
# -*- mode: shell-script; -*-
# datatools-config
##

script_name="datatools-config"

opwd=$(pwd)
help=0
debug=0

function my_exit ()
{
    cd ${opwd}
    exit $1
}

datatools_system="@CMAKE_SYSTEM_NAME@-@CMAKE_SYSTEM_PROCESSOR@"

datatools_root="@CMAKE_INSTALL_PREFIX@"

datatools_bin_dir="${datatools_root}/@CMAKE_INSTALL_BINDIR@"

datatools_lib_dir="${datatools_root}/@CMAKE_INSTALL_LIBDIR@"

datatools_etc_dir="${datatools_root}/@CMAKE_INSTALL_ETCDIR@"

datatools_doc_dir="${datatools_root}/@CMAKE_INSTALL_DOCDIR@"

datatools_include_dir="${datatools_root}/@CMAKE_INSTALL_INCLUDEDIR@"

datatools_data_dir="@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_DATADIR@"

datatools_cmake_config_dir="@CMAKE_INSTALL_PREFIX@/@_datatools_cmake_config_install_dir@"

datatools_version=@datatools_VERSION_STR@

with_python_wrapper=0
if [ "x@DATATOOLS_WITH_PYTHON_WRAPPER@" == "x1" -o "x@DATATOOLS_WITH_PYTHON_WRAPPER@" == "xON" ]; then
    with_python_wrapper=1
fi

with_debug=0
if [ "x@DATATOOLS_WITH_DEBUG@" == "x1" -o "x@DATATOOLS_WITH_DEBUG@" == "xON" ]; then
    with_debug=1
fi

with_bio=0
if [ "x@DATATOOLS_WITH_BIO@" == "x1" -o "x@DATATOOLS_WITH_BIO@" == "xON" ]; then
    with_bio=1
fi

option="$1"
shift 1
option2="$1"
shift 1

if [ "x${option}" = "x" ]; then
    echo "ERROR: ${script_name}: Missing option ! Abort !" 1>&2
    help=1
fi

if [ "x${option}" = "x--help" -o "x${option}" = "x-h" -o "x${option}" = "x-?" ]; then
    help=1
fi

function print_help ()
{
    cat<<EOF
Usage: ${script_name} [OPTIONS]

Known values for OPTION are:

  --help                print this help then exit
  --version             print version information
  --system              print system
  --prefix              print datatools installation prefix
  --bindir              print binary directory
  --libdir              print library directory
  --incdir              print include directory
  --datadir             print data/resources base directory
  --docdir              print documentation base directory
  --etcdir              print configuration base directory
  --include             print include path pre-processor flags without dependencies
  --cflags              print include path pre-processor flags with dependencies
  --libs    [option]    print library linking information, without dependencies
  --ldflags [option]
      Options: --with-bio     with linkage against the 'libdatatools_bio.so' DLL (default)
               --without-bio  without linkage against the 'libdatatools_bio.so' DLL
  --with-python-wrapper print if Python wrapper module is used
  --with-bio            print if Boost/Serialization binary code is pre-built 
                        in an auxiliary I/O shared library
  --with-debug          print if datatools has been compiled in 'debug' mode
  --cmake-config-dir    print the installation directory for the '__packname__-config.cmake' file
  --boost-version       print Boost version
  --clhep-version       print CLHEP version

EOF
    return 0
}

if [ ${help} -eq 1 ]; then
    print_help
    my_exit 1
fi

if [ "x${option}" = "x--system" ]; then
    echo "${datatools_system}"
    my_exit 0
fi

if [ "x${option}" = "x--prefix" ]; then
    echo "${datatools_root}"
    my_exit 0
fi

if [ "x${option}" = "x--version" ]; then
    echo "${datatools_version}"
    my_exit 0
fi

if [ "x${option}" = "x--incdir" ]; then
    echo "${datatools_include_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--datadir" ]; then
    echo "${datatools_data_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--etcdir" ]; then
    echo "${datatools_etc_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--docdir" ]; then
    echo "${datatools_doc_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--cmake-config-dir" ]; then
    echo "${datatools_cmake_config_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--include" ]; then
    echo "-I${datatools_include_dir} "
    my_exit 0
fi

if [ "x${option}" = "x--cflags" ]; then
    (
	echo -n "-fPIC " 
	echo -n "-I${datatools_include_dir} "  
	#echo -n "`boost-config --cflags date_time serialization iostreams filesystem system` "
	echo -n "`boost-config --cflags` "
        echo -n "`clhep-config --include` "
	echo ""
    ) | python @CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_DATADIR@/pkgtools/mkuniqueflags.py 
    my_exit 0
fi

if [ "x${option}" = "x--libdir" ]; then
    echo "${datatools_lib_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--bindir" ]; then
    echo "${datatools_bin_dir}"
    my_exit 0
fi

# compute default linkage :
bio_ldflags=
if [ ${with_bio} -eq 1 ]; then
    bio_ldflags=-ldatatools_bio
fi

if [ "x${option}" = "x--libs" ]; then
    if [ "x${option2}" = "x--without-bio" ]; then
	bio_ldflags=
    fi
    if [ "x${option2}" = "x--with-bio" -a ${with_bio} -eq 1 ]; then
	bio_ldflags=-ldatatools_bio
    fi
    echo -n "-L${datatools_lib_dir} ${bio_ldflags} -ldatatools -ldatatools_sys -ldl "
    echo
    my_exit 0
fi

if [ "x${option}" = "x--ldflags" ]; then
    if [ "x${option2}" = "x--without-bio" ]; then
	bio_ldflags=
    fi
    if [ "x${option2}" = "x--with-bio" -a ${with_bio} -eq 1 ]; then
	bio_ldflags=-ldatatools_bio
    fi
    (
	echo -n "-L${datatools_lib_dir} ${bio_ldflags} -ldatatools "
	#echo -n "`boost-config --ldflags serialization iostreams filesystem system` "
	echo -n "`boost-config --ldflags` "
	echo -n "`clhep-config --libs` -lm "
	echo -n "-ldatatools_sys -ldl "
	echo ""
    ) | python @CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_DATADIR@/pkgtools/mkuniqueflags.py -r
    my_exit 0
fi

if [ "x${option}" = "x--with-debug" ]; then
    echo "${with_debug}"
    if [ "${with_debug}" = "1" ]; then
	my_exit 0
    else
	my_exit 1	
    fi
fi

if [ "x${option}" = "x--with-bio" ]; then
    echo "${with_bio}"
    if [ "${with_bio}" = "1" ]; then
	my_exit 0
    else
	my_exit 1	
    fi
fi

if [ "x${option}" = "x--with-python-wrapper" ]; then
    echo "${with_python_wrapper}"
    if [ "${with_python_wrapper}" = "1" ]; then
	my_exit 0
    else
	my_exit 1	
    fi
fi

if [ "x${option}" = "x--boost-version" ]; then
    echo @Boost_VERSION@
    my_exit 0
fi

if [ "x${option}" = "x--clhep-version" ]; then
    echo @CLHEP_VERSION@
    my_exit 0
fi

echo "ERROR: ${script_name}: Unknown option !" 1>&2
print_help
my_exit 1

# end of datatools-config

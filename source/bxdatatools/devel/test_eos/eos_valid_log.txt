EOS ARCHIVE VALIDATION LOGBOOK :
--------------------------------

2011-04-21 FM: Notes on eos archives (vault 4.2)
               Boost version 1.44.0

Tested systems:
---------------
  * Linux 32-bits:
    Linux 2.6.31-23-generic #74-Ubuntu SMP Mon Feb 28 21:32:57 UTC 2011 i686 GNU/Linux
    2 processors: Intel(R) Core(TM)2 Duo CPU     U9600  @ 1.60GHz (3191.55 bogomips)

  * Linux 64-bits:
    Linux 2.6.18-238.12cc.el5 #1 SMP Thu Mar 3 12:19:21 CET 2011 x86_64 x86_64 x86_64 GNU/Linux
    8 processors : Intel(R) Xeon(R) CPU           E5345  @ 2.33GHz (4654.99 bogomips)


Results of a first test:
------------------------

I used a small program that serializes then deserializes
some floats and doubles using finite and nonfinite values (-1, 0, +1, +/-inf, nan)
plus some integers (~size_t).

I had to force the include of theses files in my program :  
  #include <cassert>
  #include <boost/serialization/item_version_type.hpp>
because otherwise I got some errors.

The program behaves the same on both 32bits (my laptop Linux/Ubuntu)
and 64bits systems (IN2P3 computing center - Scientific Linux ~RHEL).
The output archive files are exactly the same (both basic diff or md5sum 
check are ok).

Conclusion: it works !

I've no time to check more features, particularly the XXX_type
introduced by Robert. That would need a more sophisticated test program.


Some random remarks :
---------------------

* New version of eos archive has save/load support for :

  boost::archive::library_version_type       // uint_least16_t (boost/archive/basic_archive.hpp)
    ok with eos archive

  boost::archive::class_id_type              // int_least16_t (boost/archive/basic_archive.hpp)
    WARNING : use of 'uint_least16_t' in eos archive

  boost::serialization::item_version_type    // unsigned int (boost/serialization/item_version_type.hpp)
    use of 'uint_least32_t' in eos archive

  boost::serialization::collection_size_type // std::size_t (boost/serialization/collection_size_type.hpp)
    ok with 'uint_least32_t' in eos archive

  boost::archive::object_id_type             // uint_least32_t (boost/archive/basic_archive.hpp)
    ok with eos archive
    
  boost::archive::version_type               // uint_least32_t (boost/archive/basic_archive.hpp)
    ok with eos archive

* Some other new Boost types save/load are not implemented in eos archives but
  should use implicit casting to one of the types above:

  class_id_reference_type  // STRONG_TYPEDEF class_id_type  (boost/archive/basic_archive.hpp) ==> cast to class_id_type
  class_id_optional_type   // STRONG_TYPEDEF class_id_type  (boost/archive/basic_archive.hpp) ==> cast to class_id_type
  object_reference_type    // STRONG_TYPEDEF object_id_type (boost/archive/basic_archive.hpp) ==> cast to object_id_type
  tracking_type            // bool (boost/archive/basic_archive.hpp)  ==> cast to 'bool'
  class_name_type          // char * (boost/archive/basic_archive.hpp) ==> cast to '(const) char *'

--

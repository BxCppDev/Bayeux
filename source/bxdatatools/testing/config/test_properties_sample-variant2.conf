# Property list for the 'datatools::properties' class

# Comments starting with '#@' are special flags (possibly)

#@config A sample list of properties

#@description The configuration filename
geom.config_filename : string as path = \
  @variant(geometry:config|"${HOME}/geometry.conf")

#@description A dummy parameter
geom.dummy : boolean = false

#@description Another dummy parameter
geom.foo : integer = 4

#@description Yet another dummy parameter
geom.bar : real as mass = 1.2 kg

#@description The operator
geom.operator : string = @variant(geometry:firstname|"Billy")

#@description The operator
geom.operator2 : string = @variant(geometry:firstname|"Arthur")

#@description The detector flags
geom.detectors : boolean[5] = \
  false \
  @variant(geometry:has_detector_0|false) \
  @variant(geometry:has_detector_1|false) \
  true \
  false

#@description The detector 0 length
#@variant_only geometry:has_detector_0/if_detector
geom.detector_0.length : real as length = \
  @variant(geometry:has_detector_0/if_detector/length)

#@description The detector 0 material
#@variant_only geometry:has_detector_0/if_detector
geom.detector_0.material :  string = \
  @variant(geometry:has_detector_0/if_detector/material)

#@description The detector 0 isotope
#@variant_only geometry:has_detector_0/if_detector/material/if_radioactive
geom.detector_0.radioactivity.isotope :  string = \
  @variant(geometry:has_detector_0/if_detector/material/if_radioactive/isotope)

#@description The detector 0 mass activity
#@variant_only geometry:has_detector_0/if_detector/material/if_radioactive
geom.detector_0.radioactivity.mass_activity : real as mass_activity = \
  @variant(geometry:has_detector_0/if_detector/material/if_radioactive/mass_activity)

#@description The detector 0 thickness
#@variant_only geometry:has_detector_0/if_detector
geom.detector_0.thickness : real as length = \
  @variant(geometry:has_detector_0/if_detector/thickness)

#@description The detector 0 behaviour
#@variant_only geometry:has_detector_0/if_detector/thickness/thick_behaviour
geom.detector_0.calibration.mode : string = "rough_calibration"
geom.detector_0.calibration.a : real = 1.2 mm
geom.detector_0.calibration.b : real = 3.4

#@description The detector 0 behaviour
#@variant_only geometry:has_detector_0/if_detector/thickness/thin_behaviour
geom.detector_0.calibration.mode : string = "precise_calibration"
geom.detector_0.calibration.p0 : real =  1.1341 mm2
geom.detector_0.calibration.p1 : real =  2.9923 mm
geom.detector_0.calibration.p2 : real = -0.2123 mm

# Not supported yet
# #@variant_if geometry:has_detector_0/if_detector


#@description The detector 0 color
#@variant_only geometry:has_detector_0/if_detector
geom.detector_0.color : string = "red"

#@description The detector 0 flavor
#@variant_only geometry:has_detector_0/if_detector
geom.detector_0.flavor : string = "lemon"

#@description The detector 0 width
#@variant_only geometry:has_detector_0/if_detector
geom.detector_0.width : real as length = \
  @variant(geometry:has_detector_0/if_detector/width)

# Not supported yet
## @variant_endif geometry:has_detector_0/if_detector

#@description The logging priority threshold
geom.logging_priority : string = @variant(geometry:logging)

#@description The number of loops for an algorithm
geom.algo.nloops : integer = @variant(geometry:nloops)

#@description A multiplicity
geom.multiplicity : integer = @variant(geometry:number)

#@description A multiplicity
geom.multiplicity2 : integer = @variant(geometry:number2)

#@description A width
geom.width : real = @variant(geometry:value)

#@description A password
geom.password : string = @variant(geometry:words)

#@enable_real_with_unit This enables the parsing of unit rules for real properties

#@description The Pi constant in explicit angular unit
#@variant_only math:mode/if_accurate|true
math.pi : const real as angle = 3.14159265358979 radian

#@variant_only math:mode/if_approximated|false
math.pi : const real as angle = 3.14 radian

#@variant_only math:mode/if_inaccurate|false
math.pi : const real as angle = 3 radian

#@variant_only math:mode/if_inaccurate|false
math.golden_ratio : const real =  1.6

#@variant_only !math:mode/if_inaccurate|true
math.golden_ratio : const real =  1.6180339887

#@description The logging level of the math driver
math.logging : string = @variant(math:logging|"fatal")

#@description A temperature in explicit temperature type and unit
geom.temp : real as temperature = 278.76 kelvin

#@description A mass in explicit mass type and unit
geom.mass : real = 4.5 kg

#@description A period in explicit time type and unit
geom.period : real as time = 2.5 s

#@description The 3D position of an object as an array of 3 real coordinates with explicit length unit
geom.position : real[3] in cm = 1.0  2.0  3.0

# Not supported because '@variant(geometry:value)' is replaced by 30 cm (with explicit unit)
# #@description A position
# geom.position2 : real[3] as length = 1.2 @variant(geometry:value) -6.7

#@disable_real_with_unit This disables the parsing of unit rules for real properties

# #@variant-if has_detector_1/if_detector
#@description Some array of real numbers
array : real[3] = \
 3.14159 \
 1.570795 \
 0.5235983333333333 \
# #@variant-endif has_detector_1/if_detector

#@enable_real_with_unit This re-enables the parsing of unit rules for real properties

#@disable_real_with_unit Disables again...

#@description An array of strings
geom.tokens : string[2] = \
  "token_0" \
  @variant(geometry:firstname|"Arthur")

#@variant_if math:mode/if_accurate|true
math.a : const real = 1.00000987
math.b : const real = 3.25611122
math.c : const real = 5.67186332
#@variant_endif math:mode/if_accurate

#@variant_if math:mode/if_inaccurate|false
math.a : const real = 1.000010
math.b : const real = 3.256111
math.c : const real = 5.671863
#@variant_endif math:mode/if_inaccurate

#@variant_if math:mode/if_approximated|false
math.a : const real = 1.00
math.b : const real = 3.25
math.c : const real = 5.67
#@variant_endif math:mode/if_approximated

#@variant_only math:mode/if_accurate|true
math.z : const real = 1.2345678901234

#@variant_only math:mode/if_inaccurate|false
math.z : const real = 1.23456789

#@variant_only math:mode/if_approximated|false
math.z : const real = 1.23

# End of property list

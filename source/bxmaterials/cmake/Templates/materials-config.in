#!/usr/bin/env bash
# -*- mode: shell-script; -*-
# materials-config
##

script_name="materials-config"

opwd=$(pwd)
help=0
debug=0
bio_support=0
python_wrapper_support=0

if [ ${python_wrapper_support} -eq 1 ]; then
    with_python_wrapper=0
    if [ "x@MATERIALS_WITH_PYTHON_WRAPPER@" == "x1"  -o "x@MATERIALS_WITH_PYTHON_WRAPPER@" == "xON" ]; then
	with_python_wrapper=1
    fi
fi

if [ ${bio_support} -eq 1 ]; then
    with_bio=0
    if [ "x@MATERIALS_WITH_BIO@" == "x1" -o "x@MATERIALS_WITH_BIO@" == "xON" ]; then
	with_bio=1
    fi
fi

with_debug=0
if [ "x@MATERIALS_WITH_DEBUG@" == "x1" -o "x@MATERIALS_WITH_DEBUG@" == "xON" ]; then
    with_debug=1
fi

function my_exit ()
{
    cd ${opwd}
    exit $1
}

materials_system="@CMAKE_SYSTEM_NAME@-@CMAKE_SYSTEM_PROCESSOR@"

materials_root="@CMAKE_INSTALL_PREFIX@"

materials_include_dir="${materials_root}/@CMAKE_INSTALL_INCLUDEDIR@"

materials_lib_dir="${materials_root}/@CMAKE_INSTALL_LIBDIR@"

materials_bin_dir="${materials_root}/@CMAKE_INSTALL_BINDIR@"

materials_data_dir="@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_DATADIR@"

materials_etc_dir="@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_ETCDIR@"

materials_doc_dir="@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_DOCDIR@"

materials_cmake_config_dir="@CMAKE_INSTALL_PREFIX@/@materials_cmake_config_install_dir@"

materials_version=@materials_VERSION_STR@

option="$1"
shift 1
option2="$1"
shift 1

if [ "x${option}" = "x" ]; then
    echo "ERROR: ${script_name}: Missing option ! Abort !" 1>&2
    help=1
fi

if [ "x${option}" = "x--help" -o "x${option}" = "x-h" -o "x${option}" = "x-?" ]; then
    help=1
fi

function print_help ()
{
    cat<<EOF
Usage: ${script_name} [OPTIONS]

Known values for OPTION are:

  --help                print this help then exit
  --version             print version information
  --system              print system
  --prefix              print materials installation prefix
  --incdir              print include directory
  --libdir              print library directory
  --bindir              print binary directory
  --datadir             print data/resources base directory
  --docdir              print documentation base directory
  --etcdir              print configuration base directory
  --include             print include path pre-processor flags without dependencies
  --cflags              print include path pre-processor flags with dependencies
EOF
    if [ ${bio_support} -eq 1 ]; then
	cat<<EOF
  --libs     [option]   print library linking information, without dependencies
  --ldflags  [option]   print library linking information, with dependencies
      Options: --with-bio     with linkage against the libmaterials_bio.so DLL (default)
               --without-bio  without linkage against the libmaterials_bio.so DLL
  --with-bio            print if Boost/Serialization binary code is pre-built 
                        in an auxiliary I/O shared library
EOF
    else
	cat<<EOF
  --libs                print library linking information, without dependencies
  --ldflags             print library linking information, with dependencies
EOF
    fi
    if [ ${python_wrapper_support} -eq 1 ]; then
	cat<<EOF
  --with-python-wrapper print if Python wrapper module is used
EOF
    fi
    cat<<EOF
  --with-debug          print if materials has been compiled in 'debug' mode
  --cmake-config-dir    print the installation directory for the 'materials-config.cmake' file
EOF
    # Dependencies:
    cat<<EOF
   --geomtools-version   print geomtools version
EOF
#     cat<<EOF
#     --yyy-version        print yyy version
# EOF
    return 0
}

if [ ${help} -eq 1 ]; then
    print_help
    my_exit 1
fi

if [ "x${option}" = "x--system" ]; then
    echo "${materials_system}"
    my_exit 0
fi

if [ "x${option}" = "x--prefix" ]; then
    echo "${materials_root}"
    my_exit 0
fi

if [ "x${option}" = "x--version" ]; then
    echo "${materials_version}"
    my_exit 0
fi

if [ "x${option}" = "x--cmake-config-dir" ]; then
    echo "${materials_cmake_config_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--include-dir" -o "x${option}" = "x--incdir" ]; then
    echo "${materials_include_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--datadir" ]; then
    echo "${materials_data_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--etcdir" ]; then
    echo "${materials_etc_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--docdir" ]; then
    echo "${materials_doc_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--resources-dir" ]; then
    echo "${materials_resources_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--include" ]; then
    echo "-I${materials_include_dir} "
    my_exit 0
fi

if [ "x${option}" = "x--cflags" ]; then
    (
	echo -n "-fPIC " 
	echo -n "-I${materials_include_dir} "  
	echo -n "`geomtools-config --cflags` "
	### echo -n "`yyy-config --cflags` "
	echo ""
    ) | python @CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_DATADIR@/pkgtools/mkuniqueflags.py     
    my_exit 0
fi

if [ "x${option}" = "x--libdir" ]; then
    echo "${materials_lib_dir}"
    my_exit 0
fi

if [ "x${option}" = "x--bindir" ]; then
    echo "${materials_bin_dir}"
    my_exit 0
fi

more_ldflags=
# compute default linkage :
if [ ${bio_support} -eq 1 ]; then
  bio_ldflags=
  if [ ${with_bio} -eq 1 ]; then
      bio_ldflags=-lmaterials_bio
  fi
fi
 
if [ "x${option}" = "x--libs" ]; then
    if [ ${bio_support} -eq 1 ]; then
      if [ "x${option2}" = "x--without-bio" ]; then
     	bio_ldflags=
      fi
      if [ "x${option2}" = "x--with-bio" -a ${with_bio} -eq 1 ]; then
     	bio_ldflags=-lmaterials_bio
      fi
      more_ldflags="${more_ldflags} ${bio_ldflags} "
    fi
    echo -n "-L${materials_lib_dir} ${more_ldflags} -lmaterials "
    echo
    my_exit 0
fi

if [ "x${option}" = "x--ldflags" ]; then
    if [ ${bio_support} -eq 1 ]; then
	if [ "x${option2}" = "x--without-bio" ]; then
    	    bio_ldflags=
	fi
	if [ "x${option2}" = "x--with-bio" -a ${with_bio} -eq 1 ]; then
    	bio_ldflags=-lmaterials_bio
	fi
	more_ldflags="${more_ldflags} ${bio_ldflags} "
    fi
    (
	echo -n "-L${materials_lib_dir} ${more_ldflags} -lmaterials "
	echo -n "`geomtools-config --ldflags` "
	### echo -n "`yyy-config --ldflags/libs` "
	echo ""
    ) | python @CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_DATADIR@/pkgtools/mkuniqueflags.py -r   
    my_exit 0
fi

if [ "x${option}" = "x--with-debug" ]; then
    echo "${with_debug}"
    if [ ${with_debug} -eq 1 ]; then
	my_exit 0
    else
	my_exit 1	
    fi
fi

if [ ${bio_support} -eq 1 ]; then
    if [ "x${option}" = "x--with-bio" ]; then
	echo "${with_bio}"
	if [ ${with_bio} -eq 1 ]; then
	    my_exit 0
	else
	    my_exit 1	
	fi
    fi
fi

if [ ${python_wrapper_support} -eq 1 ]; then
    if [ "x${option}" = "x--with-python-wrapper" ]; then
	echo "${with_python_wrapper}"
	if [ ${with_python_wrapper} -eq 1 ]; then
	    my_exit 0
	else
	    my_exit 1	
	fi
    fi
fi

if [ "x${option}" = "x--geomtools-version" ]; then
    echo @geomtools_VERSION@
    my_exit 0
fi

# if [ "x${option}" = "x--yyy-version" ]; then
#     echo @yyy_VERSION@
#     my_exit 0
# fi

echo "ERROR: ${script_name}: Unknown option !" 1>&2
print_help
my_exit 1

# end of materials-config

// resource.cc - Implementation of materials resource
//
// Copyright (c) 2013 by Ben Morgan <bmorgan.warwick@gmail.com>
// Copyright (c) 2013 by The University of Warwick
//
// This file is part of materials.
//
// materials is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// materials is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with materials.  If not, see <http://www.gnu.org/licenses/>.

// Ourselves
#include <materials/resource.h>

// Standard Library
#include <fstream>
#include <cstdlib>

// Third Party
// - datatools
#include <datatools/exception.h>

// This Project

namespace {
//! Return the path to the root resource directory
std::string get_resource_root() {
  static const std::string resource_path = "/resources/data";
  static const std::string install_root = "@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_DATADIR@" + resource_path;
  if(std::getenv("MATERIALS_DATA_DIR")) {
    return std::string(std::string(std::getenv("MATERIALS_DATA_DIR")) + "/resources/data");
  }

  return install_root;
}
} // namespace 

namespace materials {
std::string get_resource(const std::string& rname) {
  DT_THROW_IF(rname[0] == '/', std::logic_error, "invalid resource name");

  std::string fullpath(get_resource_root() + "/" + rname);
  std::ifstream check(fullpath.c_str());
  DT_THROW_IF(!check.good(), 
              std::runtime_error, 
              "unreadable resource '" << fullpath << "'")
  return fullpath;
}
} // namespace materials



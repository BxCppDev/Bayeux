// bayeux/_bayeux.cc - Implementation of Bayeux
//
// Copyright (c) 2013 by Ben Morgan <bmorgan.warwick@gmail.com>
// Copyright (c) 2013 by The University of Warwick
// Copyright (c) 2014 by Francois Mauger <mauger@lpccaen.in2p3.fr>
// Copyright (c) 2014 by Universit√© de Caen
//
// This file is part of Bayeux.
//
// Bayeux is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Bayeux is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Bayeux.  If not, see <http://www.gnu.org/licenses/>.

// Standard library
#include <string>

// This package
#include <bayeux/bayeux_config.h>
#include <bayeux/bayeux.h>
#include <bayeux/version.h>

// Submodules version & resource
#include <datatools/version.h>
#include <datatools/resource.h>
#include <datatools/datatools_config.h>

// This project:
#include <cuts/version.h>

#include <materials/version.h>
#include <materials/resource.h>
#include <materials/materials_config.h>

#include <mygsl/version.h>

#include <geomtools/version.h>
#include <geomtools/resource.h>
#include <geomtools/geomtools_config.h>

#include <emfield/version.h>

#include <genbb_help/version.h>
#include <genbb_help/resource.h>
#include <genbb_help/genbb_help_config.h>

#include <genvtx/version.h>

#include <brio/version.h>

#include <dpp/version.h>

#include <mctools/version.h>

#ifdef BAYEUX_WITH_LAHAGUE_MODULE
#include <lahague/version.h>
#include <lahague/resource.h>
#include <lahague/lahague_config.h>
#endif // BAYEUX_WITH_LAHAGUE_MODULE

// This package
#include <datatools/kernel.h>
#include <datatools/library_info.h>

namespace bayeux {

  void _special_initialize_impl() {
    DT_LOG_TRACE_ENTERING(detail::sys::const_instance().get_logging());

    DT_THROW_IF(!datatools::kernel::is_instantiated(),
                std::runtime_error,
                "The datatools kernel is not instantiated !");
    datatools::kernel& krnl = datatools::kernel::instance();

    // Populate the library info register:
    if (krnl.has_library_info_register()) {
      datatools::library_info& lib_info_reg = krnl.grab_library_info_register();

      // datatools:
      datatools::properties & datatools_lib_infos =
        lib_info_reg.registration("datatools",
                                  "Serializable data structures based on Boost "
                                  "and general purpose utility classes and macros.",
                                  datatools::version::get_version());
      datatools_lib_infos.store_string(datatools::library_info::keys::install_resource_dir(),
                                       datatools::get_resource_dir(false)
                                       );
      datatools_lib_infos.store_string(datatools::library_info::keys::env_resource_dir(),
                                       std::string(DATATOOLS_ENV_RESOURCE_DIR)
                                       );

      // cuts:
      lib_info_reg.registration("cuts",
                                "Generic tools for making arbitrary data selections.",
                                cuts::version::get_version());

      // materials:
      datatools::properties & materials_lib_infos
        = lib_info_reg.registration("materials",
                                    "Description of isotopes, elements and materials plus tools "
                                    "for input to simulation applications (i.e. GDML/Geant4).",
                                    materials::version::get_version()
                                    );
      materials_lib_infos.store_string(datatools::library_info::keys::install_resource_dir(),
                                       materials::get_resource_dir(false)
                                       );
      materials_lib_infos.store_string(datatools::library_info::keys::env_resource_dir(),
                                       std::string(MATERIALS_ENV_RESOURCE_DIR)
                                       );

      // mygsl:
      lib_info_reg.registration("mygsl",
                                "C++ wrapper and extensions to the GNU Scientific Library.",
                                mygsl::version::get_version());

      // geomtools:
      datatools::properties & geomtools_lib_infos
        = lib_info_reg.registration("geomtools",
                                    "Generic tools for working with experiment geometries and "
                                    "provide input to simulation tools (i.e. GDML/Geant4).",
                                    geomtools::version::get_version()
                                    );
      geomtools_lib_infos.store_string(datatools::library_info::keys::install_resource_dir(),
                                       geomtools::get_resource_dir(false)
                                       );
      geomtools_lib_infos.store_string(datatools::library_info::keys::env_resource_dir(),
                                       std::string(GEOMTOOLS_ENV_RESOURCE_DIR)
                                       );

      // emfield:
      lib_info_reg.registration("emfield",
                                "Electromagnetic field modelling and management.",
                                emfield::version::get_version());

      // brio:
      lib_info_reg.registration("brio",
                                "A Boost over ROOT I/O serialization system (extends datatools).",
                                brio::version::get_version());

      // dpp:
      lib_info_reg.registration("dpp",
                                "A basic data processing pipeline API.",
                                dpp::version::get_version());

      // genbb_help:
      datatools::properties & genbb_help_lib_infos
        = lib_info_reg.registration("genbb_help",
                                    "C++ port and extension to the Decay0/GENBB program by Vladimir Tretyak, "
                                    "for input to simulation applications.",
                                    genbb::version::get_version()
                                    );
      genbb_help_lib_infos.store_string(datatools::library_info::keys::install_resource_dir(),
                                        genbb::get_resource_dir(false)
                                        );
      genbb_help_lib_infos.store_string(datatools::library_info::keys::env_resource_dir(),
                                        std::string(GENBB_HELP_ENV_RESOURCE_DIR)
                                        );

      // genvtx:
      lib_info_reg.registration("genvtx",
                                "Vertex random generator tools for input to simulation applications.",
                                genvtx::version::get_version());

      // mctools::
      lib_info_reg.registration("mctools",
                                "Monte-Carlo utilities with a Geant4 interface.",
                                mctools::version::get_version());
#ifdef BAYEUX_WITH_LAHAGUE_MODULE
      // LaHague:
      datatools::properties & lahague_lib_infos
        = lib_info_reg.registration("lahague",
                                    "Dosimetry and radioprotection tools.",
                                    lahague::version::get_version()
                                    );
      lahague_lib_infos.store_string(datatools::library_info::keys::install_resource_dir(),
                                     lahague::get_resource_dir(false)
                                     );
      lahague_lib_infos.store_string(datatools::library_info::keys::env_resource_dir(),
                                     std::string(LAHAGUE_ENV_RESOURCE_DIR)
                                     );
      // lahague_lib_infos.tree_dump(std::cerr, "LaHague module registration: ", "DEVEL: ");
#endif // BAYEUX_WITH_LAHAGUE_MODULE

      // bayeux:
      datatools::properties& bayeux_lib_infos = lib_info_reg.registration("bayeux",
                                                                          "A C++ foundation library for small particle/nuclear physics experiments.",
                                                                          bayeux::version::get_version());

      bayeux_lib_infos.store_string(datatools::library_info::keys::libname(),
                                    "Bayeux");
      bayeux_lib_infos.store_string(datatools::library_info::keys::install_lib_dir(),
                                    "@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@");
      bayeux_lib_infos.store_string(datatools::library_info::keys::install_include_dir(),
                                    "@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_INCLUDEDIR@");
      bayeux_lib_infos.store_string(datatools::library_info::keys::install_bin_dir(),
                                    "@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_BINDIR@");
      bayeux_lib_infos.store_string(datatools::library_info::keys::install_resource_dir(),
                                    "@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_DATADIR@/@Bayeux_RESOURCE_DIR@");
      bayeux_lib_infos.store_string(datatools::library_info::keys::env_resource_dir(),
                                    std::string(BAYEUX_ENV_RESOURCE_DIR));
      bayeux_lib_infos.store_integer(datatools::library_info::keys::version_major(),
                                     bayeux::version::get_major());
      bayeux_lib_infos.store_integer(datatools::library_info::keys::version_minor(),
                                     bayeux::version::get_minor());
      bayeux_lib_infos.store_integer(datatools::library_info::keys::version_patch(),
                                     bayeux::version::get_patch());
      bayeux_lib_infos.store_string(datatools::library_info::keys::modules(),
                                    "@Bayeux_SUBMODULES@");
      bayeux_lib_infos.store_string(datatools::library_info::keys::url(),
                                    "https://nemo.lpc-caen.in2p3.fr/wiki/Software/Bayeux");
      bayeux_lib_infos.store_string(datatools::library_info::keys::authors(),
                                    "Fran√ßois Mauger, Xavier Garrido, Ben Morgan, Benoit Guillon, Arnaud Chapon");
      bayeux_lib_infos.store_string(datatools::library_info::keys::copyright(),
                                    "GNU General Public License version 3 or later");

      if(lib_info_reg.get_logging() >= datatools::logger::PRIO_TRACE) {
        DT_LOG_TRACE(lib_info_reg.get_logging(),
                     "Status of the library info register: " );
        lib_info_reg.tree_dump(std::cerr);
      }
      krnl.register_resource_paths();
      krnl.register_configuration_variant_registries();
    }
    DT_LOG_TRACE_EXITING(detail::sys::const_instance().get_logging());
    return;
  }

  void _special_terminate_impl() {
    DT_LOG_TRACE_ENTERING(detail::sys::const_instance().get_logging());

    if (datatools::kernel::is_instantiated()) {
      datatools::kernel & krnl = datatools::kernel::instance();
      if (krnl.has_library_info_register()) {
        datatools::library_info& lib_info_reg = krnl.grab_library_info_register();
        // Unregistration of all registered submodules
        // from the kernel's library info register:
        if (lib_info_reg.has("bayeux")) lib_info_reg.unregistration("bayeux");

#ifdef BAYEUX_WITH_LAHAGUE_MODULE
        if (lib_info_reg.has("lahague")) lib_info_reg.unregistration("lahague");
#endif // BAYEUX_WITH_LAHAGUE_MODULE

        if (lib_info_reg.has("mctools")) lib_info_reg.unregistration("mctools");

        if (lib_info_reg.has("genvtx")) lib_info_reg.unregistration("genvtx");

        if (lib_info_reg.has("genbb_help")) lib_info_reg.unregistration("genbb_help");

        if (lib_info_reg.has("dpp")) lib_info_reg.unregistration("dpp");

        if (lib_info_reg.has("brio")) lib_info_reg.unregistration("brio");

        if (lib_info_reg.has("emfield")) lib_info_reg.unregistration("emfield");

        if (lib_info_reg.has("geomtools")) lib_info_reg.unregistration("geomtools");

        if (lib_info_reg.has("mygsl")) lib_info_reg.unregistration("mygsl");

        if (lib_info_reg.has("materials")) lib_info_reg.unregistration("materials");

        if (lib_info_reg.has("cuts")) lib_info_reg.unregistration("cuts");

        if (lib_info_reg.has("datatools")) lib_info_reg.unregistration("datatools");
      }
    }
    DT_LOG_TRACE_EXITING(detail::sys::const_instance().get_logging());
    return;
  }

}

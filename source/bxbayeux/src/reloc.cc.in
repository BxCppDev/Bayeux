// reloc.cc - Implementation of Bayeux relocatable feature
//
// Copyright (c) 2013-2017 by Fran√ßois Mauger <mauger@lpccaeb.in2p3.fr>
//
// This file is part of Bayeux.
//
// Bayeux is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Bayeux is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Bayeux.  If not, see <http://www.gnu.org/licenses/>.

// Ourselves
#include <bayeux/reloc.h>

// Standard Library
#include <string>

// Third Party
// Boost
#include <boost/filesystem/path.hpp>
#include <boost/filesystem/operations.hpp>

// This Project
#include <bayeux/BayeuxBinReloc.h>

namespace {
  //! Initialize directory
  int _init_directories() {
    BrInitError err;
    int error_code = br_init_lib(&err);
    return error_code;
  }

  //! Return expected relative path from lib location to resource root
  std::string relative_path_to_resourcedir() {
    return "@BAYEUX_LIBDIR_TO_RESOURCEDIR@";
  }

  //! Return expected relative path from lib location to install prefix
  std::string relative_path_to_prefix() {
    return "@BAYEUX_LIBDIR_TO_PREFIX@";
  }

  //! Return expected relative path from lib location to binary dir
  std::string relative_path_to_bindir() {
    return "@BAYEUX_LIBDIR_TO_BINDIR@";
  }

  //! Return canonical path to directory hoding libBayeux
  std::string _get_library_dir() {
    char* exePath(0);
    exePath = br_find_exe_dir("@CMAKE_INSTALL_FULL_LIBDIR@");
    boost::filesystem::path sExePath(exePath);
    free(exePath);
    boost::filesystem::path cExePath = boost::filesystem::canonical(sExePath);
    return cExePath.string();
  }
} // namespace

namespace bayeux {

  int init_directories() {
    int error_code = 0;
    static bool init = false;
    if (! init) {
      error_code = _init_directories();
      init = true;
    }
    return error_code;
  }

  std::string get_prefix_dir() {
    init_directories();
    boost::filesystem::path tmpPath(get_library_dir());
    tmpPath /= relative_path_to_prefix();
    return boost::filesystem::canonical(tmpPath).string();
  }

  std::string get_library_dir() {
    init_directories();
    boost::filesystem::path tmpPath(_get_library_dir());
    return tmpPath.string();
  }

  std::string get_binary_dir() {
    init_directories();
    boost::filesystem::path tmpPath(get_library_dir());
    tmpPath /= relative_path_to_bindir();
    return boost::filesystem::canonical(tmpPath).string();
  }

  std::string get_data_dir() {
    init_directories();
    boost::filesystem::path tmpPath(get_library_dir());
    tmpPath /= relative_path_to_resourcedir();
    return boost::filesystem::canonical(tmpPath).string();
  }

  std::string get_resource_dir() {
    init_directories();
    boost::filesystem::path tmpPath(get_data_dir());
    return tmpPath.string();
  }

} // namespace bayeux

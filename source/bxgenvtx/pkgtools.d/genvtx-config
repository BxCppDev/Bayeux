#!/bin/bash
# -*- mode: shell-script; -*-
# genvtx-config
#
# Note:
#

opwd=$(pwd)
help=0

SCRIPTNAME="genvtx-config"
COMP=gcc
COMPVER=$(${COMP} --version | head -1 | cut -d ' ' -f 3)
COMPILER=-${COMP}${COMPVER}
COMPILER=

THE_SYSTEM="$(uname -s)-$(uname -m | sed -e 's/ //g')${COMPILER}"

THEPACK_ROOT=/usr/local
if [ -n "${GENVTX_ROOT}" ]; then
    THEPACK_ROOT="${GENVTX_ROOT}" 
else 
    echo "${SCRIPTNAME}: error: 'GENVTX_ROOT' environment variable is not defined!" 
    exit 1
fi

THEPACK_INCLUDEDIR="${THEPACK_ROOT}/include" 

THEPACK_LIBDIR="${THEPACK_ROOT}/${THE_SYSTEM}/lib" 

THEPACK_BINDIR="${THEPACK_ROOT}/${THE_SYSTEM}/bin" 

THEPACK_VERSION="?"
if [ -f "${THEPACK_ROOT}/VERSION" ]; then
    THEPACK_VERSION="$(cat ${THEPACK_ROOT}/VERSION)"    
elif [ -f "${THEPACK_ROOT}/pkgtools.d/package.info"  ]; then
    version=$(cat ${THEPACK_ROOT}/pkgtools.d/package.info | grep "version=" | cut -d'=' -f2 )    
    THEPACK_VERSION=${version}
fi
THEPACK_LABEL="genvtx-${THEPACK_VERSION}" 

#echo "DATATOOLS_USING_CACHE_FILES=${DATATOOLS_USING_CACHE_FILES}" 1>&2

using_cache_files=0 # default: do not use cache files 
if [ "x${GENVTX_USING_CACHE_FILES}" != "x" ]; then
    if [ "x${GENVTX_USING_CACHE_FILES}" = "x1" ]; then
	using_cache_files=1
    else
	using_cache_files=0
    fi
fi

#echo "$SCRIPTNAME: warning: using cache files = ${using_cache_files}" 1>&2

cache_dir=/tmp/${USER}
if [ ${using_cache_files} -eq 1 ]; then
    if [ "x${PKGTOOLS_CACHE_DIR}" != "x" ]; then
	cache_dir=${PKGTOOLS_CACHE_DIR}
    fi
    if [ ! -d ${cache_dir} ]; then
	mkdir -p ${cache_dir}
	if [ $? -ne 0 ]; then
	    echo "$SCRIPTNAME: error: Cannot create cache directory !" 1>&2
	    exit 1
	fi
    fi
fi

cflags_cache=${cache_dir}/.${THEPACK_LABEL}.cflags.cache
ldflags_cache=${cache_dir}/.${THEPACK_LABEL}.ldflags.cache
### not sure the right place to do it :
if [ ${using_cache_files} -eq 0 ]; then
    test -d ${cflags_cache} && rm -f ${cflags_cache}
    test -d ${ldflags_cache} && rm -f ${ldflags_cache}
fi

opt=$1

if [ "x$opt" = "x" ]; then
    echo "${SCRIPTNAME}: error: Missing option!" 
    help=1
fi

if [ "x$opt" = "x--help" -o "x$opt" = "x-h" -o "x$opt" = "x-?" ]; then
    help=1
fi

if [ $help -eq 1 ]; then
    cat<<EOF
Usage: $SCRIPTNAME [OPTION]

Known values for OPTION are:

  --prefix              show genvtx installation prefix
  --incdir              print include directory
  --libdir              print library directory
  --bindir              print binary directory
  --include             print include path pre-processor flags without dependencies 
  --cflags              print include path pre-processor flags with dependencies
  --libs                print library linking information, without dependencies
  --ldflags             
  --libs-depends        print library linking information, with dependencies
  --help                print this help then exit
  --version             print version information
  --system              print system
  --check               check dependencies and setup

EOF
    exit 1
fi 

if [ "x$opt" = "x--system" ]; then
    echo "${THE_SYSTEM}"
    exit 0
fi 

if [ "x$opt" = "x--prefix" ]; then
    echo "${THEPACK_ROOT}"
    exit 0
fi 

if [ "x$opt" = "x--version" ]; then
    echo "${THEPACK_VERSION}"
    exit 0
fi 

if [ "x$opt" = "x--incdir" ]; then
    echo "${THEPACK_INCLUDEDIR}" 
    exit 0
fi

if [ "x$opt" = "x--include" ]; then
    echo "-I${THEPACK_INCLUDEDIR} " 
    exit 0
fi

if [ "x$opt" = "x--cflags" ]; then
    generate_cflags=0
    cflags_cache_effective=${cflags_cache}
    if [ ${using_cache_files} -eq 1 ]; then
        if [ -f ${cflags_cache} ]; then
            cat ${cflags_cache}
            exit 0
        else
            generate_cflags=1
        fi
    else
	test -f ${cflags_cache} && rm -f ${cflags_cache}
        generate_cflags=1
	cflags_cache_effective=
    fi

    if [ ${generate_cflags} -eq 1 ]; then
	(
	    (
                echo -n \
                    "-fPIC " \
	            "-I${THEPACK_INCLUDEDIR} "  \
                    "`geomtools-config --cflags` "
            ) | python ${THEPACK_ROOT}/pkgtools.d/mkuniqueflags.py
        ) | tee ${cflags_cache_effective}
        test ${using_cache_files} -eq 0 && rm -f ${cflags_cache}
#         "`mygsl-config --cflags` "  
#         "`datatools-config --cflags` "  

    fi
    exit 0
fi

if [ "x$opt" = "x--libdir" ]; then
    echo "${THEPACK_LIBDIR}"
    exit 0
fi 

if [ "x$opt" = "x--bindir" ]; then
    echo "${THEPACK_BINDIR}"
    exit 0
fi 

if [ "x$opt" = "x--libs" ]; then
    echo "-L${THEPACK_LIBDIR} -lgenvtx "
    exit 0
fi 

if [ "x$opt" = "x--libs-depends" -o "x$opt" = "x--ldflags" ]; then
    generate_ldflags=0
    ldflags_cache_effective=${ldflags_cache}
    if [ ${using_cache_files} -eq 1 ]; then
        if [ -f ${ldflags_cache} ]; then
            cat ${ldflags_cache}
            exit 0
        else
            generate_ldflags=1
        fi
    else
	test -f ${ldflags_cache} && rm -f ${ldflags_cache}
        generate_ldflags=1
	ldflags_cache_effective=
    fi
    
    if [ ${generate_ldflags} -eq 1 ]; then      
        (
            (
                echo -n "-L${THEPACK_LIBDIR} -lgenvtx "
                echo -n "`geomtools-config --ldflags` " 
            ) | python ${THEPACK_ROOT}/pkgtools.d/mkuniqueflags.py -r
        ) | tee ${ldflags_cache_effective}
        test ${using_cache_files} -eq 0 && rm -f ${ldflags_cache}

#         "`mygsl-config --ldflags` "  
#         "`datatools-config --ldflags` "  
    
    fi
    exit 0
fi 

if [ "x$opt" = "x--check" ]; then
    cd ${THEPACK_ROOT}
    ${THEPACK_ROOT}/pkgtools.d/pkgtool check
    if [ $? -ne 0 ]; then
	echo "$SCRIPTNAME: error: Check procedure failed!" >&2
	cd ${opwd}
	exit 1
    fi
    cd ${opwd}
    exit 0
fi 

echo "$SCRIPTNAME: error: Unknown option '${opt}'!"  >&2
$0 --help
exit 1

# end of genvtx-config

# - Config file for the cuts package
# It defines the following variables
#  cuts_INCLUDE_DIRS - include directories for cuts
#  cuts_LIBRARY      - libraries to link against
#  cuts_LIBRARIES    - libraries to link against
#  cuts_WITH_BIO     - flag for Boost/Serialization I/O DLL (a.k.a. 'bio')
#  cuts_BIO_LIBRARY  - library targets to link against (Boost I/O library)
#  cuts_WITH_REFLECTION  - flag for reflection DLL
#  cuts_REFLECTION_LIBRARY - library targets to link against (reflection library)

#-----------------------------------------------------------------------
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-----------------------------------------------------------------------

# set(cuts_WITH_BIO        @CUTS_WITH_BIO@)
# set(cuts_WITH_REFLECTION @CUTS_WITH_REFLECTION@)
set(cuts_DATATOOLS_DIR   @datatools_DIR@)

#-----------------------------------------------------------------------
# Locate ourselves, since all our config files should have been installed
# alongside us...
#
get_filename_component(_cuts_thisdir "${CMAKE_CURRENT_LIST_FILE}" PATH)

#-----------------------------------------------------------------------
# Include the file listing all the imported targets to make them available
# This is installed in the same location as us...
# Protect it with an in-memory variable so that we don't include
# it twice should multiple calls to find_package be made
if(NOT cuts_LIBDEPS_LOADED)
  find_package(datatools REQUIRED CONFIG PATHS ${cuts_DATATOOLS_DIR} NO_DEFAULT_PATH)
  include("${_cuts_thisdir}/cuts-libraries.cmake")
  set(cuts_LIBDEPS_LOADED 1)
endif()

#-----------------------------------------------------------------------
# Set variables pointing to used third party headers and locations.
# We have to set the headers because cuts exports the headers in
# its public interface.
# The locations are set so that clients using those packages (i.e. Boost and
# ROOT), can re-find them if needed using exact locations (EXPERIMENTAL)
# e.g:
#
#  find_package(cuts)
#  set(BOOST_ROOT ${cuts_BOOST_ROOT})
#  find_package(Boost NO_DEFAULT_PATH)
#
set(cuts_THIRD_PARTY_INCLUDE_DIRS
  @datatools_INCLUDE_DIRS@
  )

# if(cuts_WITH_REFLECTION)
#   list(INSERT cuts_THIRD_PARTY_INCLUDE_DIRS 0
#      @CAMP_INCLUDE_DIR@
#   )
# endif()

#-----------------------------------------------------------------------
# Set cuts definitions, include paths and library variables
#
get_filename_component(_cuts_inc "${_cuts_thisdir}/@TO_CUTS_INCLUDEDIR@" ABSOLUTE)

set(cuts_INCLUDE_DIR "${_cuts_inc}" CACHE PATH "Path to cuts headers")

set(cuts_INCLUDE_DIRS
  ${cuts_INCLUDE_DIR}
  ${cuts_THIRD_PARTY_INCLUDE_DIRS}
  )

#-----------------------------------------------------------------------
# Set cuts_LIBRARIES variable
set(cuts_LIBRARY cuts CACHE PATH "Path to cuts library")

# if(cuts_WITH_BIO)
#   set(cuts_BIO_LIBRARY cuts_bio)
# endif()

# if(cuts_WITH_REFLECTION)
#   set(cuts_REFLECTION_LIBRARY cuts_reflection)
# endif()
  
set(cuts_LIBRARIES ${cuts_LIBRARY})

unset(_cuts_inc)
# end

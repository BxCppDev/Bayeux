# -*- mode : shell-script; -*-
# cuts_setup.sh

function do_cuts_print_info ()
{
    local indent=""
    if [ "x$1" != "x" ]; then
	indent="${1}: "
	shift 1
    fi
    if [ "x${CUTS_ROOT}" != "x" ]; then
	echo "${indent}Current cuts setup is :" 1>&2
	echo "${indent}CUTS_ROOT                = '${CUTS_ROOT}'" 1>&2
	echo "${indent}CUTS_NAME                = '${CUTS_NAME}'" 1>&2
	echo "${indent}CUTS_VERSION             = '${CUTS_VERSION}'" 1>&2
	echo "${indent}CUTS_WITH_DEBUG          = ${CUTS_WITH_DEBUG}" 1>&2
	echo "${indent}CUTS_BIN_DIR             = '${CUTS_BIN_DIR}'"
	echo "${indent}CUTS_ETC_DIR             = '${CUTS_ETC_DIR}'"
	echo "${indent}CUTS_LIB_DIR             = '${CUTS_LIB_DIR}'"
	echo "${indent}CUTS_DOC_DIR             = '${CUTS_DOC_DIR}'"
	echo "${indent}CUTS_INCLUDE_DIR         = '${CUTS_INCLUDE_DIR}'"
	echo "${indent}CUTS_CMAKE_CONFIG_DIR    = '${CUTS_CMAKE_CONFIG_DIR}'" 1>&2
	echo "${indent}CUTS_RESOURCE_DIR        = '${CUTS_RESOURCE_DIR}'" 1>&2
    else
	echo "${indent}cuts is not setup." 1>&2
    fi
    return 0
}
typeset -fx do_cuts_print_info
alias cuts_print_info='do_cuts_print_info'

function do_cuts_setup ()
{
    local verbose=0

    while [ -n "$1" ]; do
	if [ "$1" = "--verbose" -o "$1" = "-v" ]; then
	  let verbose=verbose+1
	fi
	shift 1
    done

    if [ ${verbose} -ne 0 ]; then
	echo "NOTICE: do_cuts_setup: Setup cuts..." 1>&2
    fi

    if [ "x${CUTS_ROOT}" != "x" ]; then
	echo "WARNING: do_cuts_setup: cuts is already setup !" 1>&2
	return 2
    fi

    which datatools-config >/dev/null 2>&1
    if [ $? -ne 0 ]; then
	echo "ERROR: do_cuts_setup: Cannot find datatools setup ! Abort !" 1>&2
	return 1
    else
	if [ ${verbose} -ne 0 ]; then
	    echo "VERBOSE: do_cuts_setup: Found datatools." 1>&2
	fi
    fi

    export CUTS_ROOT="@CMAKE_INSTALL_PREFIX@"
    export CUTS_ROOT_DIR="@CMAKE_INSTALL_PREFIX@"
    export CUTS_NAME="@PROJECT_NAME@"
    export CUTS_VERSION="@cuts_VERSION@"
    export CUTS_BIN_DIR="@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_BINDIR@"
    export CUTS_ETC_DIR="@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_ETCDIR@"
    export CUTS_LIB_DIR="@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@"
    export CUTS_DOC_DIR="@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_DOCDIR@"
    export CUTS_INCLUDE_DIR="@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_INCLUDEDIR@"
    export CUTS_RESOURCE_DIR="@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_DATADIR@/resources"
    export CUTS_WITH_DEBUG=@CUTS_WITH_DEBUG@
    export CUTS_CMAKE_CONFIG_DIR="@CMAKE_INSTALL_PREFIX@/@_cuts_cmake_config_install_dir@"

    if [ -n "${PATH}" ]; then
	export PATH="${CUTS_BIN_DIR}:${PATH}"
    else
	export PATH="${CUTS_BIN_DIR}"
    fi

    if [ -n "${@_ld_library_path_env@}" ]; then
	export @_ld_library_path_env@="${CUTS_LIB_DIR}:${@_ld_library_path_env@}"
    else
	export @_ld_library_path_env@="${CUTS_LIB_DIR}"
    fi

    if [ ${verbose} -gt 1 ]; then
	do_cuts_print_info "VERBOSE: do_cuts_setup"
    fi

    if [ ${verbose} -ne 0 ]; then
	echo "NOTICE: do_cuts_setup: Setup cuts done." 1>&2
    fi
    return 0
}
typeset -fx do_cuts_setup

echo "NOTICE: do_cuts_setup: Please setup 'cuts' with 'do_cuts_setup'." 1>&2

# end of cuts_setup.sh

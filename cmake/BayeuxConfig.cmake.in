# - Config file for the Bayeux package
# It defines the following variables
#
#  Bayeux_VERSION          - Bayeux version string
#  Bayeux_VERSION_REVISION - Bayeux development tag
#  Bayeux_CMAKE_CONFIG_DIR - Bayeux CMake config directory
#  Bayeux_qt_FOUND         - Bayeux Qt usage flag
#  Bayeux_geant4_FOUND     - Bayeux Geant4 module availability flag
#  Bayeux_root_FOUND       - Bayeux ROOT usage flag
#  Bayeux_mcnp_FOUND       - Bayeux MCNP module availability flag
#  Bayeux_lahague_FOUND    - Bayeux lahague module availability flag
#  Bayeux_developer_tools_FOUND
#                          - Bayeux developer tools availability flag
#  Bayeux_docs_FOUND       - Bayeux documentation availability flag
#  Bayeux_DOXYGEN_HTML_DIR - path to directory holding Doxygen docs
#                            for Bayeux. Empty if docs were not built
#  Bayeux_DOXYGEN_TAGFILE  - path to Doxygen tagfile for Bayeux's docs
#                            Empty if docs were not built

#----------------------------------------------------------------------
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#----------------------------------------------------------------------

# - Core API version
set(Bayeux_VERSION "@Bayeux_VERSION@")
# - Development Tag
set(Bayeux_VERSION_REVISION "@Bayeux_VERSION_REVISION@")
# - Bayeux cmake-config path is stored to help explicit path resolution in client packages:
set(Bayeux_CMAKE_CONFIG_DIR "${CMAKE_CURRENT_LIST_DIR}")

# Component Availability
set(Bayeux_qt_FOUND     "@Bayeux_WITH_QT@")
set(Bayeux_geant4_FOUND "@BAYEUX_WITH_GEANT4_MODULE@")
set(Bayeux_mcnp_FOUND   "@BAYEUX_WITH_MCNP_MODULE@")
set(Bayeux_root_FOUND   "@Bayeux_WITH_ROOT@")
set(Bayeux_lahague_FOUND "@BAYEUX_WITH_LAHAGUE@")
set(Bayeux_developer_tools_FOUND "@BAYEUX_WITH_DEVELOPER_TOOLS@")
set(Bayeux_docs_FOUND "@BAYEUX_WITH_DOCS@")

#-----------------------------------------------------------------------
# Start of CMake Generated
@PACKAGE_INIT@
# End of Cmake Generated

#-----------------------------------------------------------------------
# Though usage requirements help clients link, variables for the
# header path(s) may still be needed by tools needed downstream, such
# as ROOT dictionary generation
set_and_check(Bayeux_INCLUDE_DIR "${CMAKE_CURRENT_LIST_DIR}/@PROJECT_CMAKEDIR_TO_INCLUDEDIR@")
set(Bayeux_INCLUDE_DIRS "${Bayeux_INCLUDE_DIR}" "${Bayeux_INCLUDE_DIR}/bayeux" )

#-----------------------------------------------------------------------
# - Refind third party deps here to regenerate imported targets
#   Use exact versions to guarantee(*) binary compatibilty
#   (*) at least at the API versioning level...
# - Boost
# - Force explicit Boost path in order to find the Boost used at build time
#   (to avoid spurious collision with system Boost in client packages)
set(BOOST_ROOT @Bayeux_BOOST_ROOT@)
set(BAYEUX_BOOST_VERSION @Boost_MAJOR_VERSION@.@Boost_MINOR_VERSION@)
set(BAYEUX_BOOST_COMPONENTS @BAYEUX_BOOST_COMPONENTS@)
set(Boost_NO_BOOST_CMAKE ON)
message( STATUS "Searching Boost ${BAYEUX_BOOST_VERSION} from ${BOOST_ROOT} ...")
find_package(Boost ${BAYEUX_BOOST_VERSION} EXACT REQUIRED
  COMPONENTS ${BAYEUX_BOOST_COMPONENTS}
  )

# - CAMP
set(BAYEUX_CAMP_VERSION @CAMP_VERSION@)
set(CAMP_DIR @CAMP_DIR@)
find_package(CAMP ${BAYEUX_CAMP_VERSION} EXACT REQUIRED)

# - CLHEP
set(CLHEP_DIR @CLHEP_DIR@)
set(BAYEUX_CLHEP_VERSION @CLHEP_VERSION@)
find_package(CLHEP ${BAYEUX_CLHEP_VERSION} EXACT REQUIRED
  NO_MODULE
  )

# - GSL
set(BAYEUX_GSL_VERSION @GSL_VERSION@)
find_package(GSL ${BAYEUX_GSL_VERSION} EXACT REQUIRED)

# - ROOT
set(Bayeux_root_FOUND @Bayeux_WITH_ROOT@)
if(Bayeux_root_FOUND)
  # ROOT can F-up the module path and insert it's own
  # modules. Prevent it doing this.
  set(ROOT_DIR @ROOT_DIR@)
  set(CMAKE_MODULE_PATH_PREROOT ${CMAKE_MODULE_PATH})
  set(BAYEUX_ROOT_VERSION @ROOT_VERSION@)
  set(BAYEUX_ROOT_COMPONENTS @BAYEUX_ROOT_COMPONENTS@)
  find_package(ROOT ${BAYEUX_ROOT_VERSION} EXACT REQUIRED
    COMPONENTS ${BAYEUX_ROOT_COMPONENTS}
    )
  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH_PREROOT})
endif()

# - Geant4 is NOT here because we don't expose it to clients

# - Qt
if(Bayeux_qt_FOUND)
  # Make sure targets like "Qt5::Core", ... "Qt5::Svg"
  # are recognized in client package
  set(Qt5Core_DIR    @Qt5Core_DIR@)
  set(Qt5Widgets_DIR @Qt5Widgets_DIR@)
  set(Qt5Gui_DIR     @Qt5Gui_DIR@)
  set(Qt5Svg_DIR     @Qt5Svg_DIR@)
  find_package(Qt5Core    @Qt5Core_VERSION@    EXACT REQUIRED)
  find_package(Qt5Widgets @Qt5Widgets_VERSION@ EXACT REQUIRED)
  find_package(Qt5Gui     @Qt5Gui_VERSION@     EXACT REQUIRED)
  find_package(Qt5Svg     @Qt5Svg_VERSION@     EXACT REQUIRED)
endif()

#-----------------------------------------------------------------------
# Include the file listing all the imported targets.
# This is installed in the same location as us...
#
if(NOT Bayeux_TARGETS_LOADED)
  include("${CMAKE_CURRENT_LIST_DIR}/BayeuxTargets.cmake")
  set(Bayeux_TARGETS_LOADED 1)
endif()

#-----------------------------------------------------------------------
# Documentation - loaded optionally from its own file
#
include("${CMAKE_CURRENT_LIST_DIR}/BayeuxDocs.cmake" OPTIONAL)

#-----------------------------------------------------------------------
# Component validation
#
check_required_components(Bayeux)

#-----------------------------------------------------------------------
